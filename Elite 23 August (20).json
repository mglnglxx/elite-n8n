{
  "name": "Elite 23 August",
  "nodes": [
    {
      "parameters": {
        "operation": "search",
        "base": {
          "__rl": true,
          "value": "appuDmIdGOuEoxaqW",
          "mode": "list",
          "cachedResultName": "Courses",
          "cachedResultUrl": "https://airtable.com/appuDmIdGOuEoxaqW"
        },
        "table": {
          "__rl": true,
          "value": "tblCpboKF0rK1RL8z",
          "mode": "list",
          "cachedResultName": "Table 1",
          "cachedResultUrl": "https://airtable.com/appuDmIdGOuEoxaqW/tblCpboKF0rK1RL8z"
        },
        "filterByFormula": "=OR(\n  FIND(LOWER(\"{{ $json.conversation_context.course_query }}\"), LOWER({nombre})) > 0,\n  FIND(LOWER(\"{{ $json.course_mentioned_normalized }}\"), LOWER({nombre})) > 0,\n  FIND(LOWER(\"{{ $json.conversation_context.course_query }}\"), LOWER({normalized_name})) > 0\n)",
        "options": {}
      },
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2.1,
      "position": [
        -4928,
        384
      ],
      "id": "6e59faa9-b0fe-4085-90a7-bd39def2b876",
      "name": "Course Search (Airtable)",
      "credentials": {
        "airtableTokenApi": {
          "id": "glMRuBJOdd21lPaf",
          "name": "Airtable Personal Access Token account"
        }
      }
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "/**\n * FULL UPDATED Course Processor Node\n * Replace your existing Course Processor node's JS with this in n8n.\n */\n\nconst original               = $json;\nconst records                = original.records || [];\nconst userQuery              = (original.conversation_context?.course_query || '').toLowerCase();\nconst searchTerm             = userQuery || (original.course_mentioned_normalized || '').toLowerCase();\n\nconsole.log('=== FIXED COURSE PROCESSOR DEBUG ===');\nconsole.log('Records found:', records.length);\nconsole.log('User query:', userQuery);\nconsole.log('Search term used:', searchTerm);\n\nlet course_matches      = [];\nlet unscheduled_courses = [];\nlet selected_course     = original.conversation_context?.selected_course || null;\nlet has_multiple        = false;\nlet has_unscheduled     = false;\nlet conversation_context = { ...(original.conversation_context || {}) };\n\n// helper: parse Spanish human date strings into YYYY-MM-DD (best-effort)\nfunction parseFecha(fechaStr) {\n  if (!fechaStr || typeof fechaStr !== 'string') return null;\n  const lower = fechaStr.toLowerCase();\n  if (lower.includes('por confirmar') || lower.includes('por definir')) return null;\n  const months = {\n    enero:1, febrero:2, marzo:3, abril:4, mayo:5, junio:6,\n    julio:7, agosto:8, septiembre:9, octubre:10, noviembre:11, diciembre:12\n  };\n  const yearMatch = lower.match(/(20\\d{2})/);\n  const year = yearMatch ? yearMatch[1] : `${new Date().getFullYear()}`;\n  let month = null;\n  for (const m in months) {\n    if (lower.includes(m)) { month = months[m]; break; }\n  }\n  if (!month) return null;\n  let day = '01';\n  const dayMatch = lower.match(/(\\d{1,2})/);\n  if (dayMatch) {\n    const n = parseInt(dayMatch[1], 10);\n    if (n >= 1 && n <= 31) day = String(n).padStart(2,'0');\n  }\n  const iso = `${year}-${String(month).padStart(2,'0')}-${day}`;\n  return isNaN(new Date(iso).getTime()) ? null : iso;\n}\n\n// 🔧 FIXED price-formatting helper: keep original data, let display handlers format\nfunction formatStoredPrice(price) {\n  console.log('formatStoredPrice input:', price, 'type:', typeof price);\n  \n  if (!price || price === 'Consultar' || price === 'Por confirmar') {\n    return price;\n  }\n  \n  // Keep the original price data as-is for downstream formatting\n  return price;\n}\n\n// 🔧 PRICE DEBUGGING - Add comprehensive logging\nconsole.log('=== PRICE DEBUGGING ===');\nconsole.log('Total records found:', records.length);\n\nif (records.length > 0) {\n  records.slice(0, 3).forEach((record, i) => {\n    console.log(`Record ${i+1}:`, {\n      nombre: record.nombre,\n      codigo: record.codigo,\n      precio: record.precio,\n      precio_type: typeof record.precio,\n      discounted_price: record.discounted_price,\n      discounted_price_type: typeof record.discounted_price,\n      raw_record_keys: Object.keys(record)\n    });\n  });\n}\n\nif (records.length > 0 && searchTerm.length > 0) {\n  function scoreMatch(course, searchTerm) {\n    const name   = (course.nombre || '').toLowerCase();\n    const codigo = (course.codigo || '').toLowerCase();\n    // Remove strict * exclusion; instead, penalize but allow unscheduled\n    if (codigo.includes('*')) return 100;  // Lower base score for placeholders, but allow\n\n    const cleanSearchTerm = searchTerm.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\n    const cleanName       = name.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\n    if (cleanName.includes(cleanSearchTerm)) return 1000;\n\n    // Expand semantic synonyms for \"psm\" and similar\n    const sem = {\n      psm: ['seguridad', 'hse', 'sst', 'riesgo', 'process safety', 'gestion de procesos', 'management'],\n      ductos:  ['oleoductos','gasoductos','tuberias','pipelines'],\n      seguridad:['psm','hse','sst','riesgo'],\n      riesgo:   ['seguridad','psm','hse','sst','riesgos']\n      // Add more if needed, e.g., tuberias: ['ductos', ...]\n    };\n\n    const searchWords = cleanSearchTerm.split(/\\s+/).filter(w => w.length > 1);  // Loosen to >1 char\n    const nameWords   = cleanName.split(/\\s+/).filter(w => w.length > 1);\n    let score = 0;\n\n    if (searchWords.length > 1) {\n      let matched = 0, total = searchWords.length;\n      const connectors = ['de','del','la','el','en','con','para','por','como','que','las','los'];\n      for (const w of searchWords) {\n        if (connectors.includes(w)) { total--; continue; }\n        for (const n of nameWords) {\n          if (\n            n === w ||\n            (n.length >= 4 && w.length >= 4 && (n.includes(w) || w.includes(n))) ||\n            n.startsWith(w) ||\n            w.startsWith(n) ||\n            sem[w]?.includes(n) ||\n            sem[n]?.includes(w)\n          ) {\n            matched++;\n            break;\n          }\n        }\n      }\n      if (total > 0) {\n        const r = matched / total;\n        if (r >= 0.8) score = 500;\n        else if (r >= 0.5) score = 300;\n        else return 0;\n      }\n    } else if (searchWords.length === 1) {\n      const w = searchWords[0];\n      const sem1 = {\n        psm: ['seguridad', 'hse', 'sst', 'riesgo', 'process safety', 'gestion de procesos', 'management'],\n        tuberias:['oleoductos','gasoductos','ductos','pipelines'],\n        ductos:  ['oleoductos','gasoductos','tuberias','pipelines'],\n        seguridad:['psm','hse','sst','riesgo'],\n        riesgo:   ['seguridad','psm','hse','sst','riesgos']\n      };\n      let found = false;\n      for (const n of nameWords) {\n        if (\n          n === w ||\n          (n.length >= 4 && w.length >= 4 && (n.includes(w) || w.includes(n))) ||\n          n.startsWith(w) ||\n          w.startsWith(n) ||\n          sem1[w]?.includes(n)\n        ) {\n          score = 300;\n          found = true;\n          break;\n        }\n      }\n      if (!found) return 0;\n    }\n\n    if (score > 0) {\n      if (\n        course.fecha &&\n        !course.fecha.toLowerCase().includes('por confirmar') &&\n        course.fecha.includes('2025')\n      ) {\n        score += 50;\n      }\n      if (codigo.startsWith('m')) score += 20;\n    }\n\n    // Lower threshold for short queries\n    if (searchTerm.length <= 3 && score > 0) score += 200;  // Boost acronyms like \"psm\"\n\n    return score;\n  }\n\n  function isScheduled(course) {\n    return (\n      course.fecha &&\n      !course.fecha.toLowerCase().includes('por confirmar') &&\n      !course.fecha.toLowerCase().includes('por definir')\n    );\n  }\n\n  function getDateSortValue(course) {\n    if (!course.fecha) return 999999;\n    const f = course.fecha.toLowerCase();\n    if (f.includes('por confirmar') || f.includes('por definir')) return 999999;\n    const months = {\n      enero:1, febrero:2, marzo:3, abril:4, mayo:5, junio:6,\n      julio:7, agosto:8, septiembre:9, octubre:10, noviembre:11, diciembre:12\n    };\n    for (const m in months) {\n      if (f.includes(m)) return months[m];\n    }\n    return 999999;\n  }\n\n  const scored = records\n    .map(c => ({\n      course: c,\n      score: scoreMatch(c, searchTerm),\n      isScheduled: isScheduled(c),\n      dateSortValue: getDateSortValue(c)\n    }))\n    .filter(x => x.score >= 150);  // Lowered from 200\n\n  const scheduled = scored\n    .filter(x => x.isScheduled)\n    .sort((a, b) => b.score - a.score || a.dateSortValue - b.dateSortValue);\n\n  const unscheduledData = scored\n    .filter(x => !x.isScheduled)\n    .sort((a, b) => b.score - a.score);\n\n  if (scheduled.length > 0) {\n    course_matches = scheduled.slice(0,5).map(x => {\n      const iso = parseFecha(x.course.fecha);\n      \n      console.log('Processing course for output:', {\n        nombre: x.course.nombre,\n        raw_precio: x.course.precio,\n        raw_discounted: x.course.discounted_price,\n        formatted_precio: formatStoredPrice(x.course.precio),\n        formatted_discounted: formatStoredPrice(x.course.discounted_price)\n      });\n      \n      return {\n        codigo:           x.course.codigo,\n        nombre:           x.course.nombre,\n        modalidad:        x.course.modalidad,\n        fecha:            x.course.fecha,\n        ciudad:           x.course.ciudad,\n        duracion:         x.course.duracion || x.course.intensidad,\n        precio:           formatStoredPrice(x.course.precio) || 'Consultar',\n        discounted_price: formatStoredPrice(x.course.discounted_price) || formatStoredPrice(x.course.precio) || 'Consultar',\n        instructor:       x.course.instructor || '',\n        reserva_link:     x.course.reserva_link || '',\n        url:              x.course.url,\n        fecha_formatted:  x.course.fecha || 'Por definir',\n        fecha_iso:        iso\n      };\n    });\n    has_multiple = scheduled.length > 1;\n  }\n\n  if (unscheduledData.length > 0) {\n    unscheduled_courses = unscheduledData.slice(0,5).map(x => {\n      const iso = parseFecha(x.course.fecha);\n      return {\n        codigo:           x.course.codigo,\n        nombre:           x.course.nombre,\n        modalidad:        x.course.modalidad,\n        fecha:            x.course.fecha,\n        ciudad:           x.course.ciudad,\n        duracion:         x.course.duracion || x.course.intensidad,\n        precio:           formatStoredPrice(x.course.precio) || 'Consultar',\n        discounted_price: formatStoredPrice(x.course.discounted_price) || formatStoredPrice(x.course.precio) || 'Consultar',\n        instructor:       x.course.instructor || '',\n        reserva_link:     x.course.reserva_link || '',\n        url:              x.course.url,\n        fecha_formatted:  x.course.fecha || 'Por confirmar',\n        fecha_iso:        iso\n      };\n    });\n    has_unscheduled = true;\n  }\n}\n\n// update context\nconversation_context.course_matches       = course_matches;\nconversation_context.unscheduled_courses  = unscheduled_courses;\nconversation_context.has_multiple         = has_multiple;\nconversation_context.has_unscheduled      = has_unscheduled;\nconversation_context.should_search_course = false;\n\nconsole.log('FINAL RESULTS:');\nconsole.log('- Scheduled courses:', course_matches.length);\nconsole.log('- Unscheduled courses:', unscheduled_courses.length);\nconsole.log('- Selected course:', selected_course?.nombre || 'None');\n\nreturn {\n  json: {\n    ...$json,\n    conversation_context,\n    selected_course: conversation_context.selected_course || null,\n    course_matches,\n    unscheduled_courses,\n    has_multiple,\n    has_unscheduled\n  }\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4256,
        96
      ],
      "id": "a067fc4e-976c-42b6-929c-0030c0fb9234",
      "name": "Course Processor"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "2b18c338-e515-4d99-88a8-0569fa3a3a6f",
              "leftValue": "={{$json.conversation_context.should_search_course}}\n",
              "rightValue": "true",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "or"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -5152,
        240
      ],
      "id": "4c131bd1-0364-4270-acc1-3e29318d9aeb",
      "name": "If"
    },
    {
      "parameters": {
        "operation": "search",
        "base": {
          "__rl": true,
          "value": "=appazwkbXe7mYFMCA",
          "mode": "id"
        },
        "table": {
          "__rl": true,
          "value": "=tblrYlGZCqWXEXUsz",
          "mode": "id"
        },
        "filterByFormula": "={phone_e164} = '{{$json.phone_e164}}'",
        "options": {}
      },
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2.1,
      "position": [
        -7168,
        144
      ],
      "id": "a00de54c-d651-4755-8090-d4be4f1e4ead",
      "name": "Fetch Lead Data",
      "alwaysOutputData": true,
      "credentials": {
        "airtableTokenApi": {
          "id": "glMRuBJOdd21lPaf",
          "name": "Airtable Personal Access Token account"
        }
      }
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Enhanced Message Router - Filters out non-message webhook events\n\nconsole.log('=== ENHANCED MESSAGE ROUTER DEBUG ===');\nconsole.log('Full webhook payload:', JSON.stringify($json, null, 2));\n\nfunction formatPhoneE164(rawPhone) {\n  if (!rawPhone) return null;\n  const digits = rawPhone.replace(/\\D/g, '');\n  return rawPhone.startsWith('+') ? rawPhone : `+${digits}`;\n}\n\nfunction detectMessageType(jsonData) {\n  const msg = jsonData.messages?.[0];\n  if (!msg) return 'no_message';\n  if (msg.interactive?.button_reply) return 'button';\n  if (msg.interactive?.list_reply) return 'list';\n  if (msg.text?.body) return 'text';\n  return 'unsupported';\n}\n\nfunction extractContent(jsonData) {\n  const msg = jsonData.messages?.[0];\n  if (!msg) return '';\n  return (\n    msg.text?.body ||\n    msg.interactive?.button_reply?.id ||\n    msg.interactive?.list_reply?.id ||\n    ''\n  );\n}\n\nfunction isNightShift() {\n  const hour = new Date().getHours();\n  return hour >= 22 || hour <= 6;\n}\n\nconst jsonData = $json;\n\ntry {\n  // 🔧 ENHANCED FILTERING: Check for various non-message webhook types\n  \n  // Skip if this is a status update webhook\n  if (jsonData.statuses && jsonData.statuses.length > 0) {\n    console.log('🚫 SKIPPING: This is a message status update webhook');\n    return { json: { skip: true, reason: 'status_update', skip_sending: true } };\n  }\n  \n  // Skip if this is a contacts update\n  if (jsonData.contacts && jsonData.contacts.length > 0 && !jsonData.messages) {\n    console.log('🚫 SKIPPING: This is a contacts update webhook');\n    return { json: { skip: true, reason: 'contacts_update', skip_sending: true } };\n  }\n  \n  // Skip if no messages array\n  if (!jsonData?.messages?.length) {\n    console.log('🚫 SKIPPING: No messages in webhook payload');\n    return { json: { skip: true, reason: 'no_messages', skip_sending: true } };\n  }\n\n  const messageType = detectMessageType(jsonData);\n  if (messageType === 'unsupported' || messageType === 'no_message') {\n    console.log('🚫 SKIPPING: Unsupported message type:', messageType);\n    return { json: { skip: true, reason: messageType, skip_sending: true } };\n  }\n\n  const phone_e164 = formatPhoneE164(\n    jsonData.contacts?.[0]?.wa_id || jsonData.messages?.[0]?.from\n  );\n  if (!phone_e164) {\n    console.log('🚫 SKIPPING: No valid phone number found');\n    return { json: { skip: true, reason: 'no_phone', skip_sending: true } };\n  }\n\n  // 🔧 PRESERVE ORIGINAL CASE: Extract content in original case AND lowercase\n  const originalContent = extractContent(jsonData).trim(); // Keep original case\n  const content = originalContent.toLowerCase(); // Lowercase for processing\n  const userName = jsonData.contacts?.[0]?.profile?.name || 'Usuario';\n  const currentTimestamp = new Date().toISOString();\n\n  // flag for top‑level menu selection\n  let initial_option = null;\n\n  // preserve selection context: when awaiting a course‑list index, do NOT treat 1–4 as menu\n  const awaitingSelection = jsonData.conversation_context?.awaiting_selection || false;\n\n  console.log('=== VALID MESSAGE DETECTED ===');\n  console.log('Message type:', messageType);\n  console.log('Original content:', originalContent);\n  console.log('Lowercase content:', content);\n  console.log('Phone:', phone_e164);\n  console.log('Awaiting selection state:', awaitingSelection);\n\n  // only map 1–4 to initial_option when NOT in the middle of a course selection\n  if (!awaitingSelection && /^[1-4]$/.test(content)) {\n    initial_option = parseInt(content, 10);\n    console.log('✅ Detected top‑level menu number:', initial_option);\n  }\n\n  return {\n    json: {\n      ...jsonData,\n      messageType,\n      phone_e164,\n      content, // Lowercase for processing\n      originalContent, // 🔧 NEW: Original case preserved\n      userName,\n      timestamp: currentTimestamp,\n      isNightShift: isNightShift(),\n      ready_for_ai: true,\n      initial_option,\n    },\n  };\n} catch (error) {\n  console.log('❌ ERROR in Message Router:', error.message);\n  return {\n    json: {\n      ...$json,\n      response_message: 'Error interno, intente de nuevo.',\n      should_send_buttons: false,\n      error_details: error.message,\n    },\n  };\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -7392,
        240
      ],
      "id": "96102982-aab5-469a-9994-582ea708df94",
      "name": "Message Router"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// 🔧 ENHANCED Context Enricher — Bulletproof data preservation\nfunction calculateElitePriority(item) {\n  let score = Number(item.urgency_score) || 20;\n  const keywords = item.keywords_found || [];\n  if (keywords.includes('inscripcion')) score += 40;\n  if (keywords.includes('urgente')) score += 25;\n  if (item.isNightShift) score += 20;\n  if (item.has_course_info) score += 25;\n  score = Math.min(score, 100);\n  const priority = score >= 70 ? 'hot' : score >= 50 ? 'warm' : 'cold';\n  return { score, priority };\n}\n\ntry {\n  const priorityData = calculateElitePriority($json);\n  const shouldAlertFelipe = priorityData.priority === 'hot' || $json.intent === 'inscripcion';\n  let conversation_context = $json.conversation_context || {};\n\n  console.log('=== ENHANCED CONTEXT ENRICHER DEBUG ===');\n  console.log('Input conversation_context type:', typeof conversation_context);\n  console.log('Available data keys:', Object.keys($json));\n\n  // Ensure conversation_context is an object\n  if (typeof conversation_context === 'string') {\n    try {\n      conversation_context = JSON.parse(conversation_context);\n    } catch (e) {\n      console.log('❌ Failed to parse conversation_context in enricher:', e.message);\n      conversation_context = {};\n    }\n  }\n  if (typeof conversation_context !== 'object' || conversation_context === null) {\n    conversation_context = {};\n  }\n\n  // 🔧 FIXED: Only add name and phone if parsed AND not already set\n  if ($json.parsed_name && !conversation_context.user_name) {\n    conversation_context.user_name = $json.parsed_name;\n    console.log('✅ Set user_name from parsed_name:', $json.parsed_name);\n  } else if ($json.parsed_name && conversation_context.user_name) {\n    console.log('⚠️ NOT overwriting existing user_name:', conversation_context.user_name, 'with parsed_name:', $json.parsed_name);\n  }\n  \n  if ($json.parsed_phone && !conversation_context.user_phone) {\n    conversation_context.user_phone = $json.parsed_phone;\n    console.log('✅ Set user_phone from parsed_phone:', $json.parsed_phone);\n  } else if ($json.parsed_phone && conversation_context.user_phone) {\n    console.log('⚠️ NOT overwriting existing user_phone:', conversation_context.user_phone, 'with parsed_phone:', $json.parsed_phone);\n  }\n\n  if (Array.isArray($json.keywords_found)) {\n    if ($json.keywords_found.includes('price_blocker')) {\n      conversation_context.conversion_blockers = [\n        ...(conversation_context.conversion_blockers || []),\n        'price'\n      ].filter((v,i,a) => a.indexOf(v) === i);\n    }\n    if ($json.keywords_found.includes('prefer_call'))  conversation_context.preferred_contact = 'call';\n    if ($json.keywords_found.includes('prefer_email')) conversation_context.preferred_contact = 'email';\n  }\n\n  // 🔧 BULLETPROOF COURSE DATA PRESERVATION\n  console.log('=== BULLETPROOF DATA PRESERVATION ===');\n  function preserveArraySafely(fieldName, sourceData) {\n    console.log(`Preserving ${fieldName}:`);\n    console.log('  Source type:', typeof sourceData);\n    console.log('  Source length:', Array.isArray(sourceData) ? sourceData.length : 'N/A');\n    console.log('  Existing type:', typeof conversation_context[fieldName]);\n    console.log('  Existing length:', Array.isArray(conversation_context[fieldName]) ? conversation_context[fieldName].length : 'N/A');\n\n    if (Array.isArray(sourceData) && sourceData.length > 0) {\n      conversation_context[fieldName] = sourceData;\n      console.log(`  ✅ Used fresh ${fieldName} data (${sourceData.length} items)`);\n    } else if (Array.isArray(conversation_context[fieldName]) && conversation_context[fieldName].length > 0) {\n      console.log(`  ✅ Kept existing ${fieldName} data (${conversation_context[fieldName].length} items)`);\n    } else {\n      conversation_context[fieldName] = [];\n      console.log(`  ⚠️ Initialized empty ${fieldName} array`);\n    }\n  }\n\n  preserveArraySafely('course_matches',       $json.course_matches);\n  preserveArraySafely('unscheduled_courses',  $json.unscheduled_courses);\n\n  // Preserve boolean flags with fallbacks\n  if ($json.has_multiple !== undefined) {\n    conversation_context.has_multiple = $json.has_multiple;\n  } else if (conversation_context.has_multiple === undefined) {\n    conversation_context.has_multiple = (conversation_context.course_matches.length || 0) > 1;\n  }\n\n  if ($json.has_unscheduled !== undefined) {\n    conversation_context.has_unscheduled = $json.has_unscheduled;\n  } else if (conversation_context.has_unscheduled === undefined) {\n    conversation_context.has_unscheduled = (conversation_context.unscheduled_courses.length || 0) > 0;\n  }\n\n  // Preserve selected course\n  if ($json.selected_course && typeof $json.selected_course === 'object') {\n    conversation_context.selected_course = $json.selected_course;\n    console.log('✅ Preserved selected_course:', $json.selected_course.nombre);\n  } else if (!conversation_context.selected_course) {\n    console.log('⚠️ No selected_course data available');\n  }\n\n  // 🔧 VALIDATION: Ensure data integrity\n  function validateDataIntegrity() {\n    const issues = [];\n\n    if (!Array.isArray(conversation_context.course_matches)) {\n      conversation_context.course_matches = [];\n      issues.push('Fixed course_matches array');\n    }\n    if (!Array.isArray(conversation_context.unscheduled_courses)) {\n      conversation_context.unscheduled_courses = [];\n      issues.push('Fixed unscheduled_courses array');\n    }\n    if (!Array.isArray(conversation_context.conversion_blockers)) {\n      conversation_context.conversion_blockers = [];\n      issues.push('Fixed conversion_blockers array');\n    }\n\n    conversation_context.has_multiple    = (conversation_context.course_matches.length || 0) > 1;\n    conversation_context.has_unscheduled = (conversation_context.unscheduled_courses.length || 0) > 0;\n\n    if (issues.length > 0) {\n      console.log('🔧 Fixed data integrity issues:', issues);\n    } else {\n      console.log('✅ Data integrity validated');\n    }\n  }\n  validateDataIntegrity();\n\n  console.log('=== FINAL ENRICHED STATE ===');\n  console.log('course_matches count:',      conversation_context.course_matches.length);\n  console.log('unscheduled_courses count:', conversation_context.unscheduled_courses.length);\n  console.log('has_multiple:',              conversation_context.has_multiple);\n  console.log('has_unscheduled:',           conversation_context.has_unscheduled);\n  console.log('selected_course:',           conversation_context.selected_course?.nombre || 'None');\n  console.log('user_name preserved:',       conversation_context.user_name || 'None');\n\n  return {\n    json: {\n      ...$json,\n      elite_score:            priorityData.score,\n      elite_priority:         priorityData.priority,\n      should_alert_felipe:    shouldAlertFelipe,\n      is_returning:           false,\n      conversation_context,\n      selected_course:        conversation_context.selected_course || null,\n      course_matches:         conversation_context.course_matches,\n      unscheduled_courses:    conversation_context.unscheduled_courses,\n      has_multiple:           conversation_context.has_multiple,\n      has_unscheduled:        conversation_context.has_unscheduled\n    }\n  };\n} catch (error) {\n  console.log('❌ Error in Context Enricher:', error.message);\n  return {\n    json: {\n      ...$json,\n      response_message:      'Error interno, intente de nuevo.',\n      should_send_buttons:   false,\n      error_details:         error.message,\n      conversation_context: {\n        course_matches:      [],\n        unscheduled_courses: [],\n        conversion_blockers: [],\n        has_multiple:        false,\n        has_unscheduled:     false\n      }\n    }\n  };\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4032,
        96
      ],
      "id": "15eb45a0-00ab-4ad7-9f83-401a99a142a5",
      "name": "Context Enricher"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://graph.facebook.com/v18.0/714902658372426/messages",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "whatsAppApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "messaging_product",
              "value": "whatsapp"
            },
            {
              "name": "to",
              "value": "={{$json.phone_e164}}"
            },
            {
              "name": "type",
              "value": "text"
            },
            {
              "name": "text.body",
              "value": "={{$json.response_message}}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1792,
        240
      ],
      "id": "4c5c8bf4-f113-45de-a03d-e94de97bee4c",
      "name": "WhatsApp Sender",
      "credentials": {
        "whatsAppApi": {
          "id": "dvh8U2PlTVEhvBZi",
          "name": "WhatsApp account"
        }
      }
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {
          "includeUnpaired": true
        }
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -3808,
        160
      ],
      "id": "28d8e63d-e529-474d-a8a4-d78c1b80de31",
      "name": "Merge",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "return { json: $json }; // This preserves full original data for one branch."
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -7168,
        336
      ],
      "id": "08579cc7-9021-400a-9588-b006ed1c8cda",
      "name": "Pass Through Original"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {
          "includeUnpaired": true
        }
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -6944,
        240
      ],
      "id": "6d33730a-abaf-491d-8e5e-cd6ba2b71f0e",
      "name": "Combine Branches"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "return { json: $json };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4704,
        96
      ],
      "id": "b37c0806-4606-4d1f-bc14-2564c8a4b439",
      "name": "Pass Through Course"
    },
    {
      "parameters": {
        "jsCode": "const records = $input.all().map(item => item.json); return { json: { records } };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4704,
        384
      ],
      "id": "5d03ec16-19a1-4bd4-bce9-09307d4464a5",
      "name": "Collect Records"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {
          "includeUnpaired": true
        }
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -4480,
        96
      ],
      "id": "565bb135-c412-4193-a8aa-71fa4dc2b283",
      "name": "Merge Course Data"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {
          "includeUnpaired": true
        }
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -1344,
        160
      ],
      "id": "1213408d-175c-4600-a15a-af8d7b4c6998",
      "name": "Merge1",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "62a2e3ec-baba-40ad-945a-5bd514866bad",
              "leftValue": "={{$json.skip_sending}}",
              "rightValue": {},
              "operator": {
                "type": "boolean",
                "operation": "false",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -2016,
        240
      ],
      "id": "ef69c7da-b7e8-4924-8a83-441106e1a6d4",
      "name": "Skip Cooldown Messages"
    },
    {
      "parameters": {
        "jsCode": "// 🔧 Node 5: Data Preservation & Context Updater\n// Purpose: Final context cleanup, validation, and data preservation\n\nlet conversation_context = { ...$json.conversation_context };\nconst conversation_step = $json.conversation_step;\n\nconsole.log('=== DATA PRESERVATION & UPDATER DEBUG ===');\nconsole.log('Input context keys:', Object.keys(conversation_context));\nconsole.log('Conversation step:', conversation_step);\n\n// 🔧 ENSURE CRITICAL ARRAYS EXIST AND ARE VALID\nfunction validateAndPreserveArrays() {\n  // Preserve course_matches\n  if (!Array.isArray(conversation_context.course_matches)) {\n    conversation_context.course_matches = $json.course_matches || [];\n  }\n  \n  // Preserve unscheduled_courses\n  if (!Array.isArray(conversation_context.unscheduled_courses)) {\n    conversation_context.unscheduled_courses = $json.unscheduled_courses || [];\n  }\n  \n  // Preserve conversion_blockers\n  if (!Array.isArray(conversation_context.conversion_blockers)) {\n    conversation_context.conversion_blockers = [];\n  }\n  \n  console.log('✅ Array validation complete:');\n  console.log('- course_matches:', conversation_context.course_matches.length);\n  console.log('- unscheduled_courses:', conversation_context.unscheduled_courses.length);\n  console.log('- conversion_blockers:', conversation_context.conversion_blockers.length);\n}\n\n// 🔧 ENSURE BOOLEAN FLAGS ARE CONSISTENT\nfunction validateBooleanFlags() {\n  // Update has_multiple based on actual course_matches length\n  conversation_context.has_multiple = (conversation_context.course_matches?.length || 0) > 1;\n  \n  // Update has_unscheduled based on actual unscheduled_courses length\n  conversation_context.has_unscheduled = (conversation_context.unscheduled_courses?.length || 0) > 0;\n  \n  console.log('✅ Boolean flags updated:');\n  console.log('- has_multiple:', conversation_context.has_multiple);\n  console.log('- has_unscheduled:', conversation_context.has_unscheduled);\n}\n\n// 🔧 PRESERVE SELECTED COURSE DATA\nfunction preserveSelectedCourse() {\n  // Keep existing selected_course if it exists and is valid\n  if (!conversation_context.selected_course && $json.selected_course) {\n    conversation_context.selected_course = $json.selected_course;\n    console.log('✅ Preserved selected_course from input:', $json.selected_course.nombre);\n  } else if (conversation_context.selected_course) {\n    console.log('✅ Selected_course already exists:', conversation_context.selected_course.nombre);\n  } else {\n    console.log('⚠️ No selected_course available');\n  }\n}\n\n// 🔧 CLEANUP SEARCH FLAGS\nfunction cleanupSearchFlags() {\n  // Reset search flag after processing\n  if (conversation_context.should_search_course !== undefined) {\n    console.log('🧹 Cleaning up should_search_course flag');\n    // Keep the flag for downstream processing but don't let it persist\n  }\n}\n\n// 🔧 VALIDATE CRITICAL FIELDS\nfunction validateCriticalFields() {\n  // Ensure timestamps are valid ISO strings if they exist\n  if (conversation_context.conversation_ended_at && \n      !isValidISOString(conversation_context.conversation_ended_at)) {\n    conversation_context.conversation_ended_at = new Date().toISOString();\n    console.log('🔧 Fixed invalid conversation_ended_at timestamp');\n  }\n  \n  if (conversation_context.last_response_at && \n      !isValidISOString(conversation_context.last_response_at)) {\n    delete conversation_context.last_response_at;\n    console.log('🔧 Removed invalid last_response_at timestamp');\n  }\n  \n  // Ensure user data is strings if they exist\n  if (conversation_context.user_name && typeof conversation_context.user_name !== 'string') {\n    conversation_context.user_name = String(conversation_context.user_name);\n  }\n  \n  if (conversation_context.user_phone && typeof conversation_context.user_phone !== 'string') {\n    conversation_context.user_phone = String(conversation_context.user_phone);\n  }\n  \n  // Ensure participants_count is a number if it exists\n  if (conversation_context.participants_count && typeof conversation_context.participants_count !== 'number') {\n    conversation_context.participants_count = parseInt(conversation_context.participants_count, 10) || 1;\n  }\n}\n\nfunction isValidISOString(dateString) {\n  try {\n    const date = new Date(dateString);\n    return date.toISOString() === dateString;\n  } catch {\n    return false;\n  }\n}\n\n// 🔧 EXECUTE ALL VALIDATION AND PRESERVATION STEPS\nvalidateAndPreserveArrays();\nvalidateBooleanFlags();\npreserveSelectedCourse();\ncleanupSearchFlags();\nvalidateCriticalFields();\n\nconsole.log('=== FINAL CONTEXT STATE ===');\nconsole.log('Conversation step:', conversation_step);\nconsole.log('Context keys:', Object.keys(conversation_context));\nconsole.log('Selected course:', conversation_context.selected_course?.nombre || 'None');\nconsole.log('Course matches count:', conversation_context.course_matches?.length || 0);\nconsole.log('Unscheduled courses count:', conversation_context.unscheduled_courses?.length || 0);\nconsole.log('Handoff flag:', !!conversation_context.handoff);\nconsole.log('End conversation flag:', !!conversation_context.end_conversation);\n\n// 🔧 FINAL OUTPUT\nreturn {\n  json: {\n    ...$json,\n    conversation_step,\n    conversation_context,\n    selected_course: conversation_context.selected_course || null,\n    // Expose commonly used fields for easy access downstream\n    course_matches: conversation_context.course_matches || [],\n    unscheduled_courses: conversation_context.unscheduled_courses || [],\n    has_multiple: conversation_context.has_multiple || false,\n    has_unscheduled: conversation_context.has_unscheduled || false\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -5600,
        240
      ],
      "id": "a9777006-26c0-4abd-b37e-5880a80b1dd7",
      "name": "Data Preservation & Context Updater"
    },
    {
      "parameters": {
        "jsCode": "/**\n * FIXED Conversation Step Router Node - Course Search Flow Fix\n * Replace your existing Conversation Step Router node's JS with this in n8n.\n */\n\nconst { content, normalized_content, originalRaw, just_set_new_step } = $json;\nlet conversation_step    = $json.conversation_step;\nlet conversation_context = { ...$json.conversation_context };\n\n// ─── Helpers ─────────────────────────────────────────────────────────────────\n\n/** Capitalize each word in a full name */\nfunction capitalizeName(full) {\n  return full\n    .split(' ')\n    .filter(Boolean)\n    .map(w => w.charAt(0).toUpperCase() + w.slice(1).toLowerCase())\n    .join(' ');\n}\n\n/** Parse \"name, phone, participants\" variants */\nfunction parseNamePhoneParticipants(txt) {\n  if (!txt) return { name: '', phone: '', participants: 1 };\n  const comma = txt.split(',').map(s => s.trim()).filter(Boolean);\n  if (comma.length >= 2) {\n    let [rawName, rawPhone, rawPart] = comma;\n    let participants = rawPart?.match(/(\\d+)/)?.[1] || 1;\n    return {\n      name: capitalizeName(rawName),\n      phone: rawPhone,\n      participants: +participants\n    };\n  }\n  let name = '', phone = '', participants = 1;\n  const phoneRx = /[\\+]?[\\d\\s\\-\\(\\)]{8,}/;\n  txt.split(/\\n|  +/)\n    .map(s => s.trim())\n    .filter(Boolean)\n    .forEach(line => {\n      if (phoneRx.test(line)) phone = line.replace(/\\s+/g, '');\n      else if (line.length > 2) name += (name ? ' ' : '') + line;\n    });\n  participants = +txt.match(/(\\d+)\\s*persona[s]?/i)?.[1] || 1;\n  if ((!name || !phone) && txt.includes(' ')) {\n    const words = txt.split(/\\s+/);\n    const idx = words.findIndex(w => phoneRx.test(w));\n    if (idx > 0) {\n      name = words.slice(0, idx).join(' ');\n      phone = words.slice(idx).join('').trim();\n    }\n  }\n  return {\n    name: name ? capitalizeName(name) : txt,\n    phone,\n    participants\n  };\n}\n\n/** Parse \"name + course\" */\nfunction parseNameAndCourse(raw) {\n  if (!raw) return { name: '', course: '' };\n  console.log('parseNameAndCourse input:', raw);\n  if (raw.includes(',')) {\n    const parts = raw.split(',').map(s => s.trim()).filter(Boolean);\n    if (parts.length >= 2) {\n      return {\n        name: capitalizeName(parts[0]),\n        course: parts[1]\n      };\n    }\n  }\n  const lines = raw.split(/\\n+/).map(s => s.trim()).filter(Boolean);\n  if (lines.length >= 2) return { name: capitalizeName(lines[0]), course: lines.slice(1).join(' ') };\n  const keywords = ['curso','capacitación','entrenamiento','seguridad','gerencia','riesgo'];\n  const words = raw.split(/\\s+/);\n  const idx = words.findIndex(w => keywords.some(k => w.toLowerCase().includes(k)));\n  if (idx > 0) return { name: capitalizeName(words.slice(0,idx).join(' ')), course: words.slice(idx).join(' ') };\n  if (words.length > 2) return { name: capitalizeName(words.slice(0,2).join(' ')), course: words.slice(2).join(' ') };\n  return { name: capitalizeName(raw), course: '' };\n}\n\n/** Parse \"name + course + request\" */\nfunction parseNameCourseAndRequest(raw) {\n  if (!raw) return { name: '', course: '', request: '' };\n  console.log('parseNameCourseAndRequest input:', raw);\n  if (raw.includes(',')) {\n    const parts = raw.split(',').map(s => s.trim()).filter(Boolean);\n    if (parts.length >= 3) {\n      return {\n        name: capitalizeName(parts[0]),\n        course: parts[1], \n        request: parts.slice(2).join(', ')\n      };\n    } else if (parts.length === 2) {\n      const rk = ['requiero','necesito','solicito','quiero','pido','ayuda','problema','impago','soporte','asistencia'];\n      const second = parts[1].toLowerCase();\n      for (let k of rk) {\n        if (second.includes(k)) {\n          const courseKeywords = ['curso','capacitación','entrenamiento','seguridad','gerencia','riesgo','soldadura','tuberías','ductos','psm'];\n          let foundCourse = '';\n          let foundRequest = parts[1];\n          for (let ck of courseKeywords) {\n            if (second.includes(ck)) {\n              const ckIndex = second.indexOf(ck);\n              const beforeKeyword = parts[1].substring(0, ckIndex + ck.length).trim();\n              const afterKeyword = parts[1].substring(ckIndex + ck.length).trim();\n              if (beforeKeyword && afterKeyword) {\n                foundCourse = beforeKeyword;\n                foundRequest = afterKeyword;\n                break;\n              }\n            }\n          }\n          return {\n            name: capitalizeName(parts[0]),\n            course: foundCourse || '',\n            request: foundRequest\n          };\n        }\n      }\n      return {\n        name: capitalizeName(parts[0]),\n        course: parts[1],\n        request: ''\n      };\n    }\n  }\n  const lines = raw.split(/\\n+/).map(s=>s.trim()).filter(Boolean);\n  if (lines.length >= 3) {\n    return { \n      name: capitalizeName(lines[0]), \n      course: lines[1], \n      request: lines.slice(2).join(' ') \n    };\n  }\n  if (lines.length === 2) {\n    const [name, second] = lines;\n    const rk = ['requiero','necesito','solicito','quiero','pido','ayuda','problema','impago'];\n    const low = second.toLowerCase();\n    for (let k of rk) {\n      const i = low.indexOf(k);\n      if (i > 0) {\n        return {\n          name: capitalizeName(name),\n          course: second.substring(0,i).trim(),\n          request: second.substring(i).trim()\n        };\n      }\n    }\n    return { name: capitalizeName(name), course: second, request: '' };\n  }\n  return { name: capitalizeName(raw), course: '', request: '' };\n}\n\n// ─── Step Handlers ───────────────────────────────────────────────────────────\n\nconst stepHandlers = {\n  // BRANCH 1: COURSE INFO\n  info_curso_ask_name() {\n    if (!content) {\n      $json.response_message = \"Por favor, escribe con el mayor detalle posible el nombre del curso que te interesa.\";\n      $json.response_type = 'text';\n      return;\n    }\n    if (!content.startsWith('option_')) {\n      // 🔧 CRITICAL FIX: Set the search parameters and keep the step at ask_name\n      // The search will happen externally and then we'll move to confirm step\n      conversation_context.course_query = content;\n      conversation_context.should_search_course = true;\n      \n      // 🔧 FIXED: Don't change step here - let the external search process handle it\n      // The Course Processor will set the step to 'info_curso_confirm' after search\n      console.log('✅ Set course query and search flag:', content);\n      \n      // Set a temporary response to avoid errors\n      $json.response_message = \"Buscando cursos...\";\n      $json.response_type = 'text';\n    } else {\n      $json.response_message = \"Lo siento, no entendí. Por favor, escribe con el mayor detalle posible el nombre del curso que te interesa.\";\n      $json.response_type = 'text';\n    }\n  },\n  \n  info_curso_confirm() {\n    // 🔧 FIXED: Get course data from multiple sources\n    const M = conversation_context.course_matches || $json.course_matches || [];\n    const U = conversation_context.unscheduled_courses || $json.unscheduled_courses || [];\n    const has_unscheduled = conversation_context.has_unscheduled || $json.has_unscheduled || false;\n    \n    console.log('=== INFO CURSO CONFIRM DEBUG ===');\n    console.log('Content:', content);\n    console.log('Course matches:', M.length);\n    console.log('Unscheduled courses:', U.length);\n    console.log('Has unscheduled:', has_unscheduled);\n    \n    if (!content) {\n      // First time showing results\n      if (M.length > 0) {\n        let msg = 'Tenemos estos cursos programados:\\n';\n        M.forEach((c, i) => {\n          msg += `${i+1}️⃣ ${c.nombre} (${c.codigo})\\n${c.fecha_formatted || c.fecha}\\n`;\n        });\n        msg += '\\nEscribe el número del curso que te interesa';\n        if (has_unscheduled && U.length > 0) {\n          msg += ' o escribe *otros* para ver cursos sin fecha confirmada.';\n        } else {\n          msg += '.';\n        }\n        $json.response_message = msg;\n      } else if (has_unscheduled && U.length > 0) {\n        $json.response_message = \"No encontramos cursos programados para esta búsqueda, pero tenemos alternativas sin fecha confirmada.\\n¿Quieres verlas?\\n1️⃣ Sí\\n2️⃣ No, buscar otro curso\";\n      } else {\n        $json.response_message = \"Lo siento, no encontramos cursos para esta búsqueda. Por favor, intenta con otro nombre.\";\n        // Reset to ask for new search\n        conversation_step = 'info_curso_ask_name';\n      }\n      $json.response_type = 'text';\n      return;\n    }\n\n    // Process user response\n    const n = +content;\n    if (M.length > 1) {\n      if (n >= 1 && n <= M.length) {\n        conversation_context.selected_course = M[n-1];\n        conversation_step = 'info_curso_show_info';\n      } else if (normalized_content === 'otros' && has_unscheduled) {\n        conversation_step = 'info_curso_show_unscheduled';\n      } else if (normalized_content === 'no') {\n        conversation_step = 'info_curso_ask_name';\n      } else {\n        $json.response_message = \"Lo siento, no entendí. Tenemos estos cursos programados:\\n\" + \n          M.map((c, i) => `${i+1}️⃣ ${c.nombre} (${c.codigo})\\n${c.fecha_formatted || c.fecha}\\n`).join('\\n') + \n          'Escribe el número del curso que te interesa' + \n          (has_unscheduled ? ' o escribe *otros* para ver cursos sin fecha confirmada.' : '.');\n        $json.response_type = 'text';\n      }\n    } else if (M.length === 1) {\n      if (['1','si','sí'].includes(content)) {\n        conversation_context.selected_course = M[0];\n        conversation_step = 'info_curso_show_info';\n      } else if (content === '2') {\n        conversation_step = has_unscheduled ? 'info_curso_show_unscheduled' : 'info_curso_ask_name';\n      } else if (content === '3') {\n        conversation_step = 'info_curso_ask_name';\n      } else {\n        $json.response_message = \"Lo siento, no entendí. Tenemos este curso programado:\\n1️⃣ \" + \n          M[0].nombre + \" (\" + M[0].codigo + \")\\n\" + (M[0].fecha_formatted || M[0].fecha) + \n          \"\\n¿Es este el curso que te interesa?\\n1️⃣ Sí\\n2️⃣ No, mostrar alternativas\\n3️⃣ Buscar otro curso\";\n        $json.response_type = 'text';\n      }\n    } else if (has_unscheduled && M.length === 0) {\n      if (['1','si','sí'].includes(content)) {\n        conversation_step = 'info_curso_show_unscheduled';\n      } else if (['2','no'].includes(content)) {\n        conversation_step = 'info_curso_ask_name';\n      } else {\n        $json.response_message = \"Lo siento, no entendí. No tenemos cursos programados para esta búsqueda, pero tenemos alternativas sin fecha confirmada.\\n¿Quieres verlas?\\n1️⃣ Sí\\n2️⃣ No, buscar otro curso\";\n        $json.response_type = 'text';\n      }\n    } else {\n      $json.response_message = \"Lo siento, no encontramos cursos para esta búsqueda. Por favor, intenta con otro nombre.\";\n      $json.response_type = 'text';\n      conversation_step = 'info_curso_ask_name';\n    }\n  },\n  \n  info_curso_show_unscheduled() {\n    const U = conversation_context.unscheduled_courses || $json.unscheduled_courses || [];\n    \n    if (!content) {\n      let msg = 'Estos cursos no tienen fecha confirmada:\\n';\n      U.forEach((c, i) => {\n        msg += `${i+1}️⃣ ${c.nombre} (${c.codigo})\\n${c.fecha_formatted || 'Por confirmar'}\\n`;\n      });\n      msg += 'Escribe el número del curso que te interesa o escribe *nuevo* para buscar otro.';\n      $json.response_message = msg;\n      $json.response_type = 'text';\n      return;\n    }\n    \n    const n = +content;\n    if (n >= 1 && n <= U.length) {\n      conversation_context.selected_course = U[n-1];\n      conversation_step = 'info_curso_show_info';\n    } else if (normalized_content === 'nuevo') {\n      conversation_step = 'info_curso_ask_name';\n    } else if (normalized_content === 'ninguno') {\n      conversation_step = 'unscheduled_none_details';\n    } else {\n      $json.response_message = \"Lo siento, no entendí. Estos cursos no tienen fecha confirmada:\\n\" + \n        U.map((c, i) => `${i+1}️⃣ ${c.nombre} (${c.codigo})\\n${c.fecha_formatted || 'Por confirmar'}\\n`).join('\\n') + \n        'Escribe el número del curso que te interesa o escribe *nuevo* para buscar otro.';\n      $json.response_type = 'text';\n    }\n  },\n  \n  info_curso_show_info() {\n    if (!content) {\n      const c = conversation_context.selected_course || {};\n      $json.response_message = `${c.nombre || 'Curso'}\\nModalidad: ${c.modalidad || 'Por confirmar'}\\nFecha: ${c.fecha || 'Por confirmar'}\\nCiudad: ${c.ciudad || 'Por confirmar'}\\nDuración: ${c.duracion || 'Por confirmar'}\\nInstructor: ${c.instructor || 'Por confirmar'}\\nPrecio: ${c.precio || 'Consultar'} +IVA\\n🔗 Más info: ${c.url || ''}\\n¿Qué deseas hacer ahora?\\n1️⃣ Solicitar más información\\n2️⃣ Iniciar proceso de inscripción`;\n      $json.response_type = 'button';\n      return;\n    }\n    if (normalized_content === 'finalizar') {\n      conversation_context.end_conversation = true;\n      conversation_step = 'end_conversation';\n    } else if (normalized_content === '1') {\n      conversation_step = 'info_curso_ask_more_info';\n    } else if (normalized_content === '2') {\n      conversation_step = 'inscripcion_start';\n    } else {\n      const c = conversation_context.selected_course || {};\n      $json.response_message = \"Lo siento, no entendí. \" + `${c.nombre || 'Curso'}\\nModalidad: ${c.modalidad || 'Por confirmar'}\\nFecha: ${c.fecha || 'Por confirmar'}\\nCiudad: ${c.ciudad || 'Por confirmar'}\\nDuración: ${c.duracion || 'Por confirmar'}\\nInstructor: ${c.instructor || 'Por confirmar'}\\nPrecio: ${c.precio || 'Consultar'} +IVA\\n🔗 Más info: ${c.url || ''}\\n¿Qué deseas hacer ahora?\\n1️⃣ Solicitar más información\\n2️⃣ Iniciar proceso de inscripción`;\n      $json.response_type = 'button';\n    }\n  },\n  \n  info_curso_ask_more_info() {\n    if (!content) {\n      $json.response_message = \"Indícanos sobre qué tema necesitas información adicional:\\n1️⃣ Formas de pago\\n2️⃣ Descuentos para grupos\\n3️⃣ Otros temas\";\n      $json.response_type = 'button';\n      return;\n    }\n    if (content === '1') {\n      conversation_step = 'payment_assistance_ask_details';\n    } else if (content === '2') {\n      conversation_step = 'discounts_ask_details';\n    } else if (content === '3') {\n      conversation_step = 'other_info_ask_details';\n    } else {\n      $json.response_message = \"Lo siento, no entendí. Indícanos sobre qué tema necesitas información adicional:\\n1️⃣ Formas de pago\\n2️⃣ Descuentos para grupos\\n3️⃣ Otros temas\";\n      $json.response_type = 'button';\n    }\n  },\n  \n  payment_assistance_ask_details() {\n    if (!content) {\n      $json.response_message = \"💳 Formas de pago disponibles:\\n•⁠ ⁠Transferencia bancaria a la cuenta indicada en la factura\\n•⁠ ⁠Tarjeta de crédito o débito (procesadas vía PayU Latam, PayPal o Mercado Pago)\\n•⁠ ⁠Pagos en efectivo en oficinas autorizadas\\n•⁠ ⁠Financiación (consultar condiciones)\\n📋 Consulta el procedimiento completo de pagos aquí:\\n🔗 https://hidrocarburos.com.co/procedimiento-de-pagos/\\nPara asistencia personalizada con tu método de pago, proporciona:\\n👤 Tu nombre completo\\n📞 Número de teléfono\\nEjemplo: \\\"Juan Pérez, 3001234567\\\"\";\n      $json.response_type = 'text';\n      return;\n    }\n    const parsed = parseNamePhoneParticipants(content);\n    if (!parsed.name || !parsed.phone || parsed.phone.length < 8) {\n      $json.response_message = \"Lo siento, no pude entender los detalles. Por favor proporciona:\\n👤 Tu nombre completo\\n📞 Número de teléfono\\nEjemplo: \\\"Juan Pérez, 3001234567\\\"\";\n      $json.response_type = 'text';\n      return;\n    }\n    conversation_context.temp_parsed_name = parsed.name;\n    conversation_context.temp_parsed_phone = parsed.phone;\n    conversation_context.temp_parsed_participants = parsed.participants;\n    conversation_context.continue_to_step = 'payment_assistance_handoff';\n    conversation_context.return_to_step = 'payment_assistance_ask_details';\n    conversation_step = 'confirm_user_details';\n  },\n  \n  discounts_ask_details() {\n    if (!content) {\n      $json.response_message = \"Para descuentos en grupos, proporciona:\\n👤 Tu nombre completo\\n📞 Número de teléfono\\nEjemplo: \\\"Juan Pérez, 3001234567\\\"\";\n      $json.response_type = 'text';\n      return;\n    }\n    const parsed = parseNamePhoneParticipants(content);\n    if (!parsed.name || !parsed.phone || parsed.phone.length < 8) {\n      $json.response_message = \"Lo siento, no pude entender los detalles. Por favor proporciona:\\n👤 Tu nombre completo\\n📞 Número de teléfono\\nEjemplo: \\\"Juan Pérez, 3001234567\\\"\";\n      $json.response_type = 'text';\n      return;\n    }\n    conversation_context.temp_parsed_name = parsed.name;\n    conversation_context.temp_parsed_phone = parsed.phone;\n    conversation_context.temp_parsed_participants = parsed.participants;\n    conversation_context.continue_to_step = 'discounts_handoff';\n    conversation_context.return_to_step = 'discounts_ask_details';\n    conversation_step = 'confirm_user_details';\n  },\n  \n  other_info_ask_details() {\n    if (!content) {\n      $json.response_message = \"Para otra información, proporciona:\\n👤 Tu nombre completo\\nDescripción de tu consulta\\nEjemplo: \\\"Juan Pérez, detalles sobre el curso PSM\\\"\";\n      $json.response_type = 'text';\n      return;\n    }\n    const parsed = parseNameCourseAndRequest(content);\n    if (!parsed.name || !parsed.request) {\n      $json.response_message = \"Lo siento, no pude entender los detalles. Por favor proporciona:\\n👤 Tu nombre completo\\nDescripción de tu consulta\\nEjemplo: \\\"Juan Pérez, detalles sobre el curso PSM\\\"\";\n      $json.response_type = 'text';\n      return;\n    }\n    conversation_context.temp_parsed_name = parsed.name;\n    conversation_context.temp_assistance_request = parsed.request;\n    conversation_context.continue_to_step = 'other_info_handoff';\n    conversation_context.return_to_step = 'other_info_ask_details';\n    conversation_step = 'confirm_user_details';\n  },\n  \n  confirm_user_details() {\n    if (!content) {\n      const name = conversation_context.temp_parsed_name || '';\n      const phone = conversation_context.temp_parsed_phone || '';\n      $json.response_message = \"Confirma que esta información es correcta:\\n👤 Nombre: \" + name + \"\\n📞 Teléfono: \" + phone + \"\\n¿Es correcta esta información?\\n1️⃣ Sí, es correcto\\n2️⃣ No, quiero corregir\";\n      $json.response_type = 'button';\n      return;\n    }\n    if (content === '1' || normalized_content === 'si') {\n      conversation_context.user_name = conversation_context.temp_parsed_name;\n      conversation_context.user_phone = conversation_context.temp_parsed_phone;\n      conversation_context.participants_count = conversation_context.temp_parsed_participants;\n      // Clean temp\n      delete conversation_context.temp_parsed_name;\n      delete conversation_context.temp_parsed_phone;\n      delete conversation_context.temp_parsed_participants;\n      conversation_step = conversation_context.continue_to_step;\n      delete conversation_context.continue_to_step;\n      delete conversation_context.return_to_step;\n    } else if (content === '2' || normalized_content === 'no') {\n      // Clean temp\n      delete conversation_context.temp_parsed_name;\n      delete conversation_context.temp_parsed_phone;\n      delete conversation_context.temp_parsed_participants;\n      conversation_step = conversation_context.return_to_step;\n      delete conversation_context.continue_to_step;\n      delete conversation_context.return_to_step;\n    } else {\n      const name = conversation_context.temp_parsed_name || '';\n      const phone = conversation_context.temp_parsed_phone || '';\n      $json.response_message = \"Lo siento, no entendí. Confirma que esta información es correcta:\\n👤 Nombre: \" + name + \"\\n📞 Teléfono: \" + phone + \"\\n¿Es correcta esta información?\\n1️⃣ Sí, es correcto\\n2️⃣ No, quiero corregir\";\n      $json.response_type = 'button';\n    }\n  },\n  \n  // Handoff steps\n  payment_assistance_handoff() {\n    conversation_context.handoff = true;\n    conversation_context.end_conversation = true;\n    $json.response_message = \"Gracias, un asesor te contactará pronto con asistencia para el pago.\";\n    $json.response_type = 'text';\n  },\n  \n  discounts_handoff() {\n    conversation_context.handoff = true;\n    conversation_context.end_conversation = true;\n    $json.response_message = \"Gracias, un asesor te contactará pronto con información sobre descuentos.\";\n    $json.response_type = 'text';\n  },\n  \n  other_info_handoff() {\n    conversation_context.handoff = true;\n    conversation_context.end_conversation = true;\n    $json.response_message = \"Gracias, un asesor te contactará pronto con la información solicitada.\";\n    $json.response_type = 'text';\n  }\n};\n\n// ─── Main Logic with Fix ─────────────────────────────────────────────────────\n\nconsole.log('=== CONVERSATION STEP ROUTER DEBUG ===');\nconsole.log('Initial step:', conversation_step);\nconsole.log('User content:', content);\nconsole.log('Normalized content:', normalized_content);\nconsole.log('Has course matches:', ($json.course_matches || []).length);\nconsole.log('Context course matches:', (conversation_context.course_matches || []).length);\n\n// 🔧 CRITICAL FIX: Preserve search results in conversation context\nif ($json.course_matches && $json.course_matches.length > 0) {\n  conversation_context.course_matches = $json.course_matches;\n  conversation_context.has_multiple = $json.has_multiple || false;\n}\nif ($json.unscheduled_courses && $json.unscheduled_courses.length > 0) {\n  conversation_context.unscheduled_courses = $json.unscheduled_courses;\n  conversation_context.has_unscheduled = $json.has_unscheduled || false;\n}\n\n// Loop to process handlers until step stabilizes\nlet previous_step = conversation_step;\nlet loopCount = 0;\nconst maxLoops = 5; // Safety to prevent infinite loops\n\nwhile (true) {\n  loopCount++;\n  if (loopCount > maxLoops) {\n    console.log('⚠️ Max loops reached to prevent infinite loop');\n    break;\n  }\n\n  const handler = stepHandlers[conversation_step];\n  if (handler) {\n    console.log('Calling handler for step:', conversation_step);\n    handler();\n  } else {\n    console.log('⚠️ No handler found for step:', conversation_step);\n    break;\n  }\n\n  // Clear input after handling the current step\n  console.log('✅ Clearing input after handling');\n  // 🔧 FIXED: Only clear content on first loop to prevent infinite processing\n  if (loopCount === 1) {\n    content = '';\n    normalized_content = '';\n  }\n\n  // Check if step changed\n  if (conversation_step === previous_step) break;\n  previous_step = conversation_step;\n}\n\n// Final updates and output\nconsole.log('Final step:', conversation_step);\nconsole.log('Final context keys:', Object.keys(conversation_context));\n\nreturn {\n  json: {\n    ...$json,\n    conversation_step,\n    conversation_context,\n    selected_course: conversation_context.selected_course || null,\n    course_matches: conversation_context.course_matches || [],\n    unscheduled_courses: conversation_context.unscheduled_courses || [],\n    has_multiple: conversation_context.has_multiple || false,\n    has_unscheduled: conversation_context.has_unscheduled || false\n  }\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -5824,
        240
      ],
      "id": "8abea3fb-3794-474d-97f5-7ee20b620b4f",
      "name": "Conversation Step Router (State Machine)"
    },
    {
      "parameters": {
        "jsCode": "// 🔧 Node 3: Menu & Input Processor - FIXED VERSION\n// Purpose: Handle menu selections, input mapping, and routing setup\n\nlet content = $json.content;\nconst conversation_step = $json.conversation_step;\nlet conversation_context = $json.conversation_context || {};\nconst is_first_interaction = $json.is_first_interaction;\nconst awaiting_selection = $json.awaiting_selection;\n\nconsole.log('=== MENU & INPUT PROCESSOR DEBUG ===');\nconsole.log('Content:', content);\nconsole.log('Conversation step:', conversation_step);\nconsole.log('Is first interaction:', is_first_interaction);\nconsole.log('Awaiting selection:', awaiting_selection);\nconsole.log('Current branch:', conversation_context.branch);\n\n// Initialize variables for processing\nlet updated_conversation_step = conversation_step;\nlet updated_conversation_context = { ...conversation_context };\nlet just_set_new_step = false;\n\n// 🔧 FIXED: Only treat as menu selection if we're NOT already in a conversation flow\nconst is_in_active_flow = updated_conversation_step && \n                         updated_conversation_step !== null && \n                         conversation_context.branch;\n\n// 🔧 FIXED: Menu selection scenario should only apply to initial menu, not mid-conversation\nconst is_menu_selection_scenario = !updated_conversation_step || \n                                  updated_conversation_step === null ||\n                                  !conversation_context.branch ||\n                                  conversation_context.intro_sent === true;\n\nconsole.log('🔍 Menu selection check:', {\n  conversation_step: updated_conversation_step,\n  has_branch: !!conversation_context.branch,\n  intro_sent: conversation_context.intro_sent,\n  is_menu_scenario: is_menu_selection_scenario,\n  is_in_active_flow: is_in_active_flow,\n  content: content,\n  awaiting_selection: awaiting_selection\n});\n\n// 🔧 CRITICAL FIX: Only map to options if NOT in an active conversation flow\nif (/^[1-4]$/.test(content) && !awaiting_selection && is_menu_selection_scenario && !is_in_active_flow) {\n  content = `option_${content}`;\n  console.log('✅ Mapped number to option:', content);\n}\n\n// 🔧 TOP-LEVEL OPTIONS PROCESSING - Only if NOT in active flow\nif (is_menu_selection_scenario && !is_in_active_flow && content.startsWith('option_')) {\n  const opt = +content.replace('option_','');\n  console.log('✅ Processing top-level option:', opt);\n  \n  if (opt === 1) { \n    updated_conversation_step = 'info_curso_ask_name';    \n    updated_conversation_context.branch = 'info_curso'; \n  }\n  else if (opt === 2) { \n    updated_conversation_step = 'inscripcion_ask_course'; \n    updated_conversation_context.branch = 'inscripcion'; \n  }\n  else if (opt === 3) { \n    updated_conversation_step = 'asistencia_ask_name';    \n    updated_conversation_context.branch = 'asistencia'; \n  }\n  else if (opt === 4) { \n    updated_conversation_step = 'soporte_ask_type';    \n    updated_conversation_context.branch = 'soporte'; \n  }\n  \n  // 🔧 ENSURE CLEAN STATE for new branch\n  updated_conversation_context.handoff = false;\n  updated_conversation_context.end_conversation = false;\n  updated_conversation_context.conversation_ended_at = null;\n  updated_conversation_context.awaiting_selection = false;\n  \n  just_set_new_step = true;\n  console.log('✅ Set new conversation step:', updated_conversation_step);\n  console.log('✅ Cleared handoff/end flags for fresh start');\n} else if (is_in_active_flow) {\n  console.log('🔄 In active conversation flow - preserving number input as-is');\n  // Don't modify content - let it pass through as the actual number for course selection\n}\n\n// Preserve array data helper function\nfunction preserveArrayData(key) {\n  const arr = $json[key];\n  if (Array.isArray(arr) && arr.length) {\n    updated_conversation_context[key] = arr;\n  }\n}\n\n// Always preserve existing data\npreserveArrayData('course_matches');\npreserveArrayData('unscheduled_courses');\n\n// Preserve boolean flags\nif ($json.has_multiple !== undefined) {\n  updated_conversation_context.has_multiple = $json.has_multiple;\n}\nif ($json.has_unscheduled !== undefined) {\n  updated_conversation_context.has_unscheduled = $json.has_unscheduled;\n}\n\n// Preserve selected course\nif ($json.selected_course) {\n  updated_conversation_context.selected_course = $json.selected_course;\n}\n\n// Ensure arrays exist if not already present\nif (!Array.isArray(updated_conversation_context.course_matches)) {\n  updated_conversation_context.course_matches = [];\n}\nif (!Array.isArray(updated_conversation_context.unscheduled_courses)) {\n  updated_conversation_context.unscheduled_courses = [];\n}\nif (!Array.isArray(updated_conversation_context.conversion_blockers)) {\n  updated_conversation_context.conversion_blockers = [];\n}\n\n// Ensure boolean flags are properly set\nif (updated_conversation_context.has_multiple === undefined) {\n  updated_conversation_context.has_multiple = (updated_conversation_context.course_matches.length || 0) > 1;\n}\nif (updated_conversation_context.has_unscheduled === undefined) {\n  updated_conversation_context.has_unscheduled = (updated_conversation_context.unscheduled_courses.length || 0) > 0;\n}\n\nconsole.log('=== MENU PROCESSOR OUTPUT ===');\nconsole.log('Updated step:', updated_conversation_step);\nconsole.log('Just set new step:', just_set_new_step);\nconsole.log('Content after processing:', content);\nconsole.log('Context handoff flag:', updated_conversation_context.handoff);\nconsole.log('Context end_conversation flag:', updated_conversation_context.end_conversation);\nconsole.log('Course matches count:', updated_conversation_context.course_matches.length);\nconsole.log('Unscheduled courses count:', updated_conversation_context.unscheduled_courses.length);\n\nreturn {\n  json: {\n    ...$json,\n    content, // May have been modified (option_ mapping) or preserved as-is\n    conversation_step: updated_conversation_step,\n    conversation_context: updated_conversation_context,\n    just_set_new_step,\n    is_first_interaction: is_menu_selection_scenario && !is_in_active_flow\n  }\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -6048,
        240
      ],
      "id": "6f0f80ed-ef05-4235-a8a5-58943e0f3155",
      "name": "Menu & Input Processor"
    },
    {
      "parameters": {
        "jsCode": "// 🔧 Enhanced Cooldown & Anti-Duplication Handler WITH FIXED RESET FUNCTIONALITY\n// Purpose: Handle cooldown logic, prevent duplicates, AND properly detect reset conditions\n\nconst content = $json.content;\nconst conversation_step = $json.conversation_step;\nconst conversation_context = $json.conversation_context || {};\n\n// 🔧 RESET CONSTANTS\nconst CONVERSATION_RESET_MINUTES = 3;\nconst CONVERSATION_COOLDOWN_SECONDS = 45;\nconst RESPONSE_COOLDOWN_SECONDS = 4;\nconst MESSAGE_PROCESSING_COOLDOWN_SECONDS = 3;\nconst RAPID_GREETING_COOLDOWN_SECONDS = 30;\n\nconst ACKNOWLEDGMENT_WORDS = [\n  'gracias', 'ok', 'perfecto', 'bien', 'entendido', 'vale', 'listo',\n  'excelente', 'muchas gracias', 'está bien', 'muy bien', 'genial',\n  'bueno', 'si', 'sí', 'claro', 'de acuerdo', 'correcto', 'dale'\n];\n\n// 🔧 GREETING DETECTION\nfunction isGreetingMessage(content) {\n  const greetingPatterns = /^(hola|buenos días|buenas tardes|buenas noches|buen día)$/i;\n  return greetingPatterns.test(content.toLowerCase().trim());\n}\n\n// 🔧 FIXED: RESET CONDITION DETECTION\nfunction shouldResetConversation(context, currentTimestamp) {\n  console.log('🔄 CHECKING RESET CONDITIONS...');\n  \n  // 1. Check for conversation end conditions\n  if (context.end_conversation === true) {\n    console.log('🔄 RESET TRIGGER: end_conversation flag set');\n    return { shouldReset: true, reason: 'conversation_ended' };\n  }\n  \n  if (context.handoff === true) {\n    console.log('🔄 RESET TRIGGER: handoff to advisor completed');\n    return { shouldReset: true, reason: 'handoff_completed' };\n  }\n  \n  // 2. 🔧 CRITICAL FIX: Check for post-reset scenarios more comprehensively\n  if (context.reset_from_previous === true || context.pending_reset === true) {\n    console.log('🔄 RESET TRIGGER: post-reset scenario detected');\n    return { shouldReset: true, reason: context.reset_reason || 'post_reset_detected' };\n  }\n  \n  // 3. Check if we're in a state where conversation should be reset (handoff/end but no active step)\n  if ((context.handoff === true || context.end_conversation === true) && !$json.conversation_step) {\n    console.log('🔄 RESET TRIGGER: completed conversation state detected');\n    return { shouldReset: true, reason: 'completed_conversation_state' };\n  }\n  \n  // 4. Check for conversation_ended_at timestamp indicating completed conversation\n  if (context.conversation_ended_at && !$json.conversation_step) {\n    console.log('🔄 RESET TRIGGER: conversation_ended_at timestamp exists');\n    return { shouldReset: true, reason: 'conversation_ended_timestamp' };\n  }\n  \n  // 5. Check for 3-minute inactivity\n  if (context.last_user_message_time) {\n    const lastMessageTime = new Date(context.last_user_message_time);\n    const currentTime = new Date(currentTimestamp);\n    const minutesSinceLastMessage = (currentTime - lastMessageTime) / (1000 * 60);\n    \n    console.log('🕘 Time check:', {\n      lastMessage: context.last_user_message_time,\n      current: currentTimestamp,\n      minutesElapsed: minutesSinceLastMessage.toFixed(2)\n    });\n    \n    if (minutesSinceLastMessage >= CONVERSATION_RESET_MINUTES) {\n      console.log('🔄 RESET TRIGGER: 3+ minutes of inactivity');\n      return { shouldReset: true, reason: 'inactivity_timeout' };\n    }\n  }\n  \n  return { shouldReset: false, reason: null };\n}\n\n// 🔧 FIXED: Enhanced duplicate greeting detection (with proper reset awareness)\nfunction isRapidOrDuplicateGreeting(context, currentTime) {\n  if (!isGreetingMessage(content)) {\n    return false;\n  }\n  \n  console.log('🔍 GREETING DETECTION:');\n  console.log('- Content:', content);\n  console.log('- Is greeting:', isGreetingMessage(content));\n  console.log('- Intro sent:', context.intro_sent);\n  console.log('- Pending reset:', context.pending_reset);\n  console.log('- Reset from previous:', context.reset_from_previous);\n  console.log('- Handoff:', context.handoff);\n  console.log('- End conversation:', context.end_conversation);\n  console.log('- Conversation ended at:', context.conversation_ended_at);\n  console.log('- Current conversation step:', $json.conversation_step);\n  \n  // 🔧 CRITICAL FIX: Allow greetings during ANY reset scenario\n  const isInResetScenario = context.pending_reset || \n                           context.reset_from_previous ||\n                           (context.handoff === true && !$json.conversation_step) ||\n                           (context.end_conversation === true && !$json.conversation_step) ||\n                           (context.conversation_ended_at && !$json.conversation_step);\n  \n  if (isInResetScenario) {\n    console.log('✅ GREETING ALLOWED - Reset scenario detected');\n    return false;\n  }\n  \n  // If intro was already sent AND we're not in a reset scenario, check for rapid duplicates\n  if (context.intro_sent && !isInResetScenario) {\n    console.log('🔍 Intro already sent, checking for rapid duplicates...');\n    \n    const currentTimeObj = new Date(currentTime);\n    \n    // Check last_greeting_time for rapid duplicates\n    if (context.last_greeting_time) {\n      const lastGreetingTime = new Date(context.last_greeting_time);\n      const secondsSinceLastGreeting = (currentTimeObj - lastGreetingTime) / 1000;\n      \n      if (secondsSinceLastGreeting < RAPID_GREETING_COOLDOWN_SECONDS) {\n        console.log(`🚫 RAPID DUPLICATE: only ${secondsSinceLastGreeting.toFixed(1)}s since last greeting`);\n        return true;\n      }\n    }\n    \n    // Check last_response_at for recent bot activity\n    if (context.last_response_at) {\n      const lastResponseTime = new Date(context.last_response_at);\n      const secondsSinceLastResponse = (currentTimeObj - lastResponseTime) / 1000;\n      \n      if (secondsSinceLastResponse < RAPID_GREETING_COOLDOWN_SECONDS) {\n        console.log(`🚫 RAPID DUPLICATE: only ${secondsSinceLastResponse.toFixed(1)}s since last response`);\n        return true;\n      }\n    }\n    \n    console.log('⚠️ DUPLICATE GREETING: intro already sent');\n    return true; // Block duplicate greetings when intro was already sent\n  }\n  \n  console.log('✅ FIRST GREETING OR POST-RESET GREETING ALLOWED');\n  return false;\n}\n\n// 🔧 COOLDOWN FUNCTIONS\nfunction isInConversationCooldown(context) {\n  if (!context.conversation_ended_at) return false;\n  const endTime = new Date(context.conversation_ended_at);\n  const now = new Date();\n  const secondsPassed = (now - endTime) / 1000;\n  return secondsPassed < CONVERSATION_COOLDOWN_SECONDS;\n}\n\nfunction isInResponseCooldown(context) {\n  if (!context.last_response_at) return false;\n  const responseTime = new Date(context.last_response_at);\n  const now = new Date();\n  const secondsPassed = (now - responseTime) / 1000;\n  return secondsPassed < RESPONSE_COOLDOWN_SECONDS;\n}\n\n// 🔧 Enhanced menu selection and expected response detection\nfunction isMenuSelectionOrExpectedResponse(content, conversation_step) {\n  const normalizedContent = content.toLowerCase().trim();\n  \n  console.log('🔍 CHECKING MENU/EXPECTED RESPONSE:');\n  console.log('- Content:', content);\n  console.log('- Normalized:', normalizedContent);\n  console.log('- Step:', conversation_step);\n  console.log('- Length:', normalizedContent.length);\n  \n  // Menu selections (1-4)\n  if (!conversation_step && /^[1-4]$/.test(normalizedContent)) {\n    console.log('✅ MAIN MENU SELECTION DETECTED');\n    return true;\n  }\n  \n  // Allow course name inputs when asking for course name (info flow)\n  if (conversation_step === 'info_curso_ask_name' && normalizedContent.length > 3) {\n    console.log('✅ COURSE NAME DETECTED (INFO FLOW) - bypassing cooldown');\n    return true;\n  }\n  \n  // Allow course names for registration flow\n  if (conversation_step === 'inscripcion_ask_course' && normalizedContent.length > 3) {\n    console.log('✅ REGISTRATION COURSE NAME DETECTED - bypassing cooldown');\n    return true;\n  }\n  \n  // Allow name inputs for assistance flow (option 3)\n  if (conversation_step === 'asistencia_ask_name' && normalizedContent.length > 3) {\n    console.log('✅ ASSISTANCE NAME DETECTED - bypassing cooldown');\n    return true;\n  }\n  \n  // Allow name inputs for support flow (option 4)  \n  if (conversation_step === 'soporte_ask_name' && normalizedContent.length > 3) {\n    console.log('✅ SUPPORT NAME DETECTED - bypassing cooldown');\n    return true;\n  }\n  \n  // Generic name detection for any \"ask_name\" step\n  if (conversation_step && conversation_step.includes('ask_name') && normalizedContent.length > 3) {\n    console.log('✅ GENERIC NAME INPUT DETECTED - bypassing cooldown');\n    return true;\n  }\n  \n  // Generic name detection for any step that asks for user info\n  if (conversation_step && (conversation_step.includes('name') || conversation_step.includes('usuario')) && normalizedContent.length > 3) {\n    console.log('✅ USER INFO INPUT DETECTED - bypassing cooldown');\n    return true;\n  }\n  \n  // Detect substantial text that looks like a name (2+ words, letters only)\n  if (normalizedContent.length > 3 && /^[a-záéíóúñü\\s]+$/i.test(normalizedContent) && normalizedContent.includes(' ')) {\n    console.log('✅ SUBSTANTIAL NAME-LIKE TEXT DETECTED - bypassing cooldown');\n    return true;\n  }\n  \n  // Allow any substantial course-related input\n  if (normalizedContent.length > 5 && (\n    normalizedContent.includes('curso') ||\n    normalizedContent.includes('capacit') ||\n    normalizedContent.includes('entrenam') ||\n    normalizedContent.includes('formaci') ||\n    normalizedContent.includes('seguridad') ||\n    normalizedContent.includes('proceso') ||\n    normalizedContent.includes('gestión') ||\n    normalizedContent.includes('calidad')\n  )) {\n    console.log('✅ COURSE-RELATED INPUT DETECTED - bypassing cooldown');\n    return true;\n  }\n  \n  const expectedResponses = [\n    '1', '2', '3', '4', '5',\n    'si', 'sí', 'no',\n    'otros', 'nuevo', 'ninguno',\n    'finalizar'\n  ];\n  \n  const isExpected = expectedResponses.includes(normalizedContent) || \n                    (normalizedContent.length <= 3 && /^[a-z0-9]+$/.test(normalizedContent));\n  \n  console.log(`${isExpected ? '✅' : '❌'} Expected response check: ${isExpected}`);\n  \n  return isExpected;\n}\n\nfunction isAcknowledgmentMessage(content) {\n  const norm = content.toLowerCase().trim();\n  return ACKNOWLEDGMENT_WORDS.includes(norm) ||\n         /^(muchas )?gracias( muchas)?$/.test(norm) ||\n         /^(está )?bien$/.test(norm) ||\n         /^(muy )?bueno$/.test(norm) ||\n         (norm.length <= 10 && ACKNOWLEDGMENT_WORDS.some(w => norm.includes(w)));\n}\n\nfunction isSubstantialMessage(content) {\n  const kws = ['curso','información','inscripción','precio','asesor','ayuda','soporte','consulta','cotización','certificado'];\n  const norm = content.toLowerCase();\n  \n  if (isGreetingMessage(content)) return true;\n  if (norm.length > 20) return true;\n  if (kws.some(k=> norm.includes(k))) return true;\n  if (/^[1-4]$/.test(content)) return true;\n  return false;\n}\n\nconsole.log('=== ENHANCED COOLDOWN HANDLER WITH FIXED RESET DEBUG ===');\nconsole.log('Content:', content);\nconsole.log('Step:', conversation_step);\nconsole.log('Context end_conversation:', conversation_context.end_conversation);\nconsole.log('Context handoff:', conversation_context.handoff);\nconsole.log('Context reset_from_previous:', conversation_context.reset_from_previous);\nconsole.log('Context pending_reset:', conversation_context.pending_reset);\nconsole.log('Context conversation_ended_at:', conversation_context.conversation_ended_at);\n\n// ✅ FIXED: CHECK FOR RESET CONDITIONS FIRST\nconst resetCheck = shouldResetConversation(conversation_context, $json.timestamp);\n\n// ✅ RESET TRIGGERED\nif (resetCheck.shouldReset) {\n  const updated_context = {\n    ...conversation_context,\n    last_user_message_time: $json.timestamp,\n    pending_reset: true,\n    reset_reason: resetCheck.reason,\n    reset_timestamp: $json.timestamp,\n    // 🔧 CRITICAL FIXES: clear flags so we start clean\n    end_conversation: false,\n    handoff: false,\n    conversation_ended_at: null,\n    intro_sent: false,     // 🔑 clear intro_sent on ALL resets\n    last_greeting_time: null, // 🔑 clear greeting timestamp\n    last_response_at: null,   // 🔑 clear to avoid response cooldown\n  };\n\n  console.log('🔄 RESET TRIGGERED - Reason:', resetCheck.reason);\n\n  return {\n    json: {\n      ...$json,\n      should_reset_conversation: true,\n      reset_reason: resetCheck.reason,\n      new_record: true,          // 🔑 downstream signal\n      conversation_context: updated_context,\n      should_skip: false,        // 🔑 ENSURE message is processed\n      skip_sending: false,       // 🔑 ENSURE response is sent\n      is_first_interaction: true, // 🔑 TREAT as new conversation\n      conversation_step: null    // 🔑 CLEAR conversation step\n    }\n  };\n}\n\n// Update last user message time for activity tracking\nlet updated_conversation_context = {\n  ...conversation_context,\n  last_user_message_time: $json.timestamp\n};\n\n// Check for rapid/duplicate greetings\nif (isRapidOrDuplicateGreeting(updated_conversation_context, $json.timestamp)) {\n  console.log('🚫 RAPID/DUPLICATE GREETING DETECTED - blocking');\n  return {\n    json: {\n      ...$json,\n      should_skip: true,\n      skip_reason: 'rapid_duplicate_greeting',\n      conversation_step: 'rapid_duplicate_greeting',\n      skip_sending: true,\n      response_message: null,\n      conversation_context: {\n        ...updated_conversation_context,\n        last_message_processed_at: $json.timestamp,\n        last_greeting_time: $json.timestamp\n      }\n    }\n  };\n}\n\n// For first greeting: Set timestamp to block subsequent rapid greetings\nif (isGreetingMessage(content) && !updated_conversation_context.intro_sent && !updated_conversation_context.reset_from_previous) {\n  console.log('✅ FIRST GREETING DETECTED - setting blocking timestamp');\n  updated_conversation_context.last_greeting_time = $json.timestamp;\n  updated_conversation_context.first_greeting_time = $json.timestamp;\n}\n\n// Response cooldown check with bypass logic\nif (isInResponseCooldown(updated_conversation_context)) {\n  console.log('🕘 CHECKING RESPONSE COOLDOWN...');\n  \n  if (isMenuSelectionOrExpectedResponse(content, conversation_step)) {\n    console.log('✅ MENU SELECTION/EXPECTED RESPONSE - bypassing response cooldown');\n  } else {\n    console.log('🚫 IN RESPONSE COOLDOWN - ignoring rapid follow-up message');\n    console.log('- Cooldown period:', RESPONSE_COOLDOWN_SECONDS, 'seconds');\n    console.log('- Last response at:', updated_conversation_context.last_response_at);\n    console.log('- Current time:', $json.timestamp);\n    \n    return {\n      json: {\n        ...$json,\n        should_skip: true,\n        skip_reason: 'response_cooldown_ignore',\n        conversation_step: 'response_cooldown_ignore',\n        skip_sending: true,\n        response_message: null\n      }\n    };\n  }\n}\n\n// Conversation cooldown logic\nconst isCurrentlyInConversationCooldown = isInConversationCooldown(updated_conversation_context);\nconst isAcknowledgment = isAcknowledgmentMessage(content);\nconst isSubstantial = isSubstantialMessage(content);\n\nconsole.log('🔍 COOLDOWN STATUS:');\nconsole.log('- In conversation cooldown:', isCurrentlyInConversationCooldown);\nconsole.log('- Is acknowledgment:', isAcknowledgment);\nconsole.log('- Is substantial:', isSubstantial);\n\nif (isCurrentlyInConversationCooldown) {\n  if (isAcknowledgment && !isSubstantial) {\n    console.log('🚫 IGNORING: Acknowledgment during cooldown');\n    return {\n      json: {\n        ...$json,\n        should_skip: true,\n        skip_reason: 'conversation_cooldown_ignore',\n        conversation_step: 'conversation_cooldown_ignore',\n        skip_sending: true,\n        response_message: null\n      }\n    };\n  }\n  // For substantial messages during cooldown, continue processing (no restart)\n}\n\nconsole.log('✅ All cooldown checks passed - proceeding with normal processing');\nreturn {\n  json: {\n    ...$json,\n    should_skip: false,\n    skip_sending: false, // 🔧 CRITICAL: Ensure this is false\n    conversation_context: {\n      ...updated_conversation_context,\n      last_message_processed_at: $json.timestamp\n    }\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -6272,
        240
      ],
      "id": "c005682c-3fc8-4bb2-8e67-c805a28e7194",
      "name": "Cooldown & Anti-Duplication Handler"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// 🔧 Node 1: Context Loader & Sanitizer\n// Purpose: Extract, normalize, and validate conversation context\n\n// Extract incoming message or button/list reply\nconst incoming           = $json.message || {};\nconst buttonReplyId      = incoming.interactive?.button_reply?.id;\nconst listReplyId        = incoming.interactive?.list_reply?.id;\nconst raw                = buttonReplyId || listReplyId || $json.content || '';\nconst originalRaw        = buttonReplyId || listReplyId || $json.originalContent || $json.content || '';\nlet content              = raw.toString().toLowerCase().trim();\nconst normalized_content = content.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\n\nconsole.log('=== CONTEXT LOADER DEBUG ===');\nconsole.log('Raw content:', raw);\nconsole.log('Original raw content:', originalRaw);\nconsole.log('Normalized content:', normalized_content);\nconsole.log('Message timestamp:', $json.timestamp);\n\n// Carry over prior state\nlet conversation_step    = $json.conversation_step || null;\nlet conversation_context = $json.conversation_context;\nlet selected_course      = null;\n\n// Ensure context is object\nif (typeof conversation_context === 'string') {\n  try { \n    conversation_context = JSON.parse(conversation_context); \n  } catch { \n    conversation_context = {}; \n  }\n}\nif (typeof conversation_context !== 'object' || !conversation_context) {\n  conversation_context = {};\n}\n\nconsole.log('=== CONTEXT VALIDATION ===');\nconsole.log('Context keys:', Object.keys(conversation_context));\nconsole.log('Current conversation_step:', conversation_step);\nconsole.log('Context handoff flag:', conversation_context.handoff);\nconsole.log('Context end_conversation flag:', conversation_context.end_conversation);\n\n// Basic interaction state\nconst is_first_interaction = !conversation_step;\nconst awaiting_selection = conversation_context.awaiting_selection || false;\n\n// 🔧 NEW: Capture first message content\nif (is_first_interaction && originalRaw && !conversation_context.first_message_content) {\n  conversation_context.first_message_content = originalRaw;\n  conversation_context.first_message_at = $json.timestamp;\n  console.log('✅ Captured first message content:', originalRaw);\n}\n\nreturn {\n  json: {\n    ...$json,\n    content,\n    originalRaw,\n    normalized_content,\n    conversation_step,\n    conversation_context,\n    is_first_interaction,\n    awaiting_selection,\n    selected_course: conversation_context.selected_course || null\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -6496,
        240
      ],
      "id": "b83cb472-6f37-4da3-baf6-f454ff7995df",
      "name": "Context Loader & Sanitizer"
    },
    {
      "parameters": {
        "jsCode": "// 🔧 ENHANCED Merge Previous State - RESET-AWARE VERSION\nlet convContext = {};\n\nconsole.log('=== ENHANCED MERGE PREVIOUS STATE DEBUG ===');\nconsole.log('Input conversation_context type:', typeof $json.conversation_context);\nconsole.log('Input conversation_context value:', $json.conversation_context);\n\ntry {\n  const contextString = $json.conversation_context || '{}';\n  \n  // Handle both string and object inputs\n  if (typeof contextString === 'string') {\n    convContext = JSON.parse(contextString);\n    console.log('✅ Parsed conversation_context from string');\n  } else if (typeof contextString === 'object' && contextString !== null) {\n    convContext = contextString;\n    console.log('✅ Used conversation_context object directly');\n  } else {\n    convContext = {};\n    console.log('⚠️ Using empty conversation_context');\n  }\n  \n  console.log('Raw parsed context keys:', Object.keys(convContext));\n  \n  // 🔧 CRITICAL: Check if this is a reset scenario and should be ignored\n  const isResetScenario = convContext.handoff === true || \n                         convContext.end_conversation === true ||\n                         convContext.conversation_ended_at;\n  \n  console.log('🔄 IS RESET SCENARIO (context should be ignored):', isResetScenario);\n  \n  if (isResetScenario) {\n    console.log('🔄 RESET SCENARIO DETECTED - Using minimal context');\n    \n    // For reset scenarios, use minimal context and let the reset handler recreate it\n    convContext = {\n      // Keep only essential data for potential reset processing\n      conversation_number: convContext.conversation_number || 1,\n      handoff: convContext.handoff,\n      end_conversation: convContext.end_conversation,\n      conversation_ended_at: convContext.conversation_ended_at,\n      \n      // Initialize empty arrays to prevent errors\n      course_matches: [],\n      unscheduled_courses: [],\n      conversion_blockers: [],\n      \n      // Set flags for reset processing\n      has_multiple: false,\n      has_unscheduled: false,\n      \n      // Mark for reset processing\n      ready_for_reset: true\n    };\n    \n    console.log('🔄 Using reset-ready minimal context');\n  } else {\n    // 🔧 Normal processing: Enhanced array restoration with validation\n    function restoreArrayField(fieldName) {\n      const field = convContext[fieldName];\n      \n      console.log(`\\n=== RESTORING ${fieldName.toUpperCase()} ===`);\n      console.log('Raw field type:', typeof field);\n      console.log('Raw field value:', field);\n      \n      if (Array.isArray(field)) {\n        console.log(`✅ ${fieldName} is already array with ${field.length} items`);\n        return field;\n      } else if (typeof field === 'string') {\n        try {\n          const parsed = JSON.parse(field);\n          if (Array.isArray(parsed)) {\n            console.log(`✅ Successfully parsed ${fieldName} string to array with ${parsed.length} items`);\n            return parsed;\n          } else {\n            console.log(`❌ ${fieldName} string parsed but not an array:`, typeof parsed);\n            return [];\n          }\n        } catch (e) {\n          console.log(`❌ Failed to parse ${fieldName} string:`, e.message);\n          return [];\n        }\n      } else if (field === null || field === undefined) {\n        console.log(`⚠️ ${fieldName} is null/undefined, using empty array`);\n        return [];\n      } else {\n        console.log(`❌ ${fieldName} has unexpected type, using empty array`);\n        return [];\n      }\n    }\n    \n    // Restore arrays with enhanced validation\n    convContext.course_matches = restoreArrayField('course_matches');\n    convContext.unscheduled_courses = restoreArrayField('unscheduled_courses');\n    \n    // Ensure other arrays exist\n    if (!Array.isArray(convContext.conversion_blockers)) {\n      convContext.conversion_blockers = [];\n    }\n    \n    console.log('\\n=== FINAL RESTORED STATE ===');\n    console.log('course_matches length:', convContext.course_matches?.length || 0);\n    console.log('unscheduled_courses length:', convContext.unscheduled_courses?.length || 0);\n    console.log('has_unscheduled flag:', convContext.has_unscheduled);\n    console.log('selected_course:', convContext.selected_course?.nombre || 'None');\n  }\n  \n} catch (error) {\n  console.log('❌ Error in merge previous state:', error.message);\n  console.log('Error stack:', error.stack);\n  convContext = {\n    course_matches: [],\n    unscheduled_courses: [],\n    conversion_blockers: [],\n    has_multiple: false,\n    has_unscheduled: false,\n    ready_for_reset: true // Mark as needing reset due to error\n  };\n}\n\n// Final validation\nfunction validateAndFix() {\n  if (!Array.isArray(convContext.course_matches)) {\n    console.log('🔧 Fixing course_matches array');\n    convContext.course_matches = [];\n  }\n  \n  if (!Array.isArray(convContext.unscheduled_courses)) {\n    console.log('🔧 Fixing unscheduled_courses array');\n    convContext.unscheduled_courses = [];\n  }\n  \n  if (typeof convContext.has_multiple !== 'boolean') {\n    convContext.has_multiple = false;\n  }\n  \n  if (typeof convContext.has_unscheduled !== 'boolean') {\n    convContext.has_unscheduled = convContext.unscheduled_courses.length > 0;\n  }\n  \n  console.log('✅ Post-validation state complete');\n}\n\nvalidateAndFix();\n\nreturn [{ \n  json: { \n    ...$json, \n    conversation_step: $json.conversation_step || null, \n    response_type: $json.response_type || null, \n    wants_advisor: $json.wants_advisor || false, \n    conversation_context: convContext, \n    is_returning: !!$json.id,\n    // 🔧 NEW: Pass through reset indicators\n    ready_for_reset: convContext.ready_for_reset || false,\n    context_handoff: convContext.handoff || false,\n    context_end_conversation: convContext.end_conversation || false\n  } \n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -6720,
        240
      ],
      "id": "eafe6edf-9352-4720-8e2b-a9acee6a9687",
      "name": "Merge Previous State"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// AI Processor - FIXED GREETING RECOGNITION\nconst content = ($json.content || '').toLowerCase().trim();\nlet intent = 'consulta_general';\nlet urgency_score = 20;\nlet keywords_found = [];\nlet course_code = null;\nlet course_mentioned = null;\nlet parsed_name = null;\nlet parsed_phone = null;\nlet parsed_details = null;\n\ntry {\n  // 🔧 FIXED: Don't parse names from common greetings\n  function isCommonGreeting(text) {\n    const greetings = ['hola', 'buenos días', 'buenas tardes', 'buenas noches', 'buen día', 'buenos dias'];\n    const normalized = text.toLowerCase().trim();\n    return greetings.some(greeting => normalized === greeting || normalized.startsWith(greeting + ' '));\n  }\n\n  // Intent detection simplified for new flow\n  if (content.includes('inscribir') || content.includes('inscripción')) {\n    intent = 'inscripcion';\n    urgency_score = 65;\n    keywords_found.push('inscripcion');\n  } else if (content.includes('precio') || content.includes('costo') || content.includes('descuento')) {\n    intent = 'consulta_precio';\n    urgency_score = 55;\n    keywords_found.push('precio');\n  } else if (content.includes('pago') || content.includes('factura')) {\n    intent = 'proceso_pago';\n    urgency_score = 75;\n    keywords_found.push('pago');\n  } else if (content.includes('soporte') || content.includes('certificado') || content.includes('facturación')) {\n    intent = 'soporte';\n    urgency_score = 40;\n    keywords_found.push('soporte');\n  }\n\n  // Urgency\n  if (content.includes('urgente') || content.includes('rápido')) {\n    urgency_score += 25;\n    keywords_found.push('urgente');\n  }\n\n  // Course mentions (examples)\n  if (content.includes('seguridad') || content.includes('psm')) {\n    course_mentioned = 'seguridad';\n    urgency_score += 15;\n  } else if (content.includes('gerencia') || content.includes('riesgo')) {\n    course_mentioned = 'gerencia riesgo';\n    urgency_score += 15;\n  }\n\n  // Group/blockers\n  if (content.includes('grupo') || content.includes('empresa')) {\n    keywords_found.push('group_inquiry');\n  }\n  if (content.includes('caro') || content.includes('precio alto')) {\n    keywords_found.push('price_blocker');\n  }\n  if (content.includes('tiempo') || content.includes('ahora no')) {\n    keywords_found.push('timing_blocker');\n  }\n  if (content.includes('aprobar') || content.includes('jefe')) {\n    keywords_found.push('approval_blocker');\n  }\n  if (content.includes('decid')) {\n    keywords_found.push('not_decided');\n  }\n  if (content.includes('llama')) {\n    keywords_found.push('prefer_call');\n  }\n  if (content.includes('email') || content.includes('correo')) {\n    keywords_found.push('prefer_email');\n  }\n\n  // 🔧 FIXED: Parse structured inputs but avoid greeting parsing\n  if (!isCommonGreeting($json.originalContent || content)) {\n    const parts = content.split(/\\s+/);\n    if (parts.length >= 2) {\n      // Only parse if it looks like structured data (name, phone, etc.)\n      const hasPhonePattern = parts.some(part => /\\d{7,}/.test(part));\n      const hasMultipleWords = parts.length >= 3;\n      \n      if (hasPhonePattern || hasMultipleWords) {\n        parsed_name = parts[0];\n        parsed_phone = parts[1].match(/\\d+/) ? parts[1] : null;\n        parsed_details = parts.slice(2).join(' ');\n      }\n    }\n  } else {\n    console.log('🔧 SKIPPING name parsing for greeting:', $json.originalContent || content);\n  }\n\n  if ($json.isNightShift) urgency_score += 20;\n  urgency_score = Math.min(urgency_score, 100);\n  const priority_level = urgency_score >= 70 ? 'hot' : urgency_score >= 50 ? 'warm' : 'cold';\n\n  return {\n    json: {\n      ...$json,\n      course_code,\n      intent,\n      urgency_score,\n      keywords_found,\n      course_mentioned,\n      priority_level,\n      parsed_name,\n      parsed_phone,\n      parsed_details,\n      ai_processed: true\n    }\n  };\n} catch (error) {\n  return { \n    json: { \n      ...$json, \n      response_message: 'Error interno, intente de nuevo.', \n      should_send_buttons: false, \n      error_details: error.message \n    } \n  };\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -5376,
        240
      ],
      "id": "4b77259c-f08b-44e0-9ab1-72c7edb31070",
      "name": "AI Processor"
    },
    {
      "parameters": {
        "jsCode": "// 🔧 Enhanced Priority Response Handler WITH RESET FUNCTIONALITY\n// Purpose: Handle priority responses including reset scenarios\n\nconst processing_path = $json.processing_path;\nconst response_data = $json.response_data;\nconst step = response_data?.step;\nconst context = response_data?.conversation_context;\nconst content = response_data?.content;\nconst reset_reason = $json.reset_reason;\n\nconsole.log('=== ENHANCED PRIORITY RESPONSE HANDLER DEBUG ===');\nconsole.log('Processing path:', processing_path);\nconsole.log('Step:', step);\nconsole.log('Reset reason:', reset_reason);\nconsole.log('Context available:', !!context);\nconsole.log('Context keys:', context ? Object.keys(context) : 'N/A');\nconsole.log('Context reset_from_previous:', context?.reset_from_previous);\nconsole.log('Context pending_reset:', context?.pending_reset);\nconsole.log('Should reset conversation:', $json.should_reset_conversation);\n\n// Only process priority responses\nif (!['cooldown_ignore', 'handoff', 'end_conversation', 'greeting_shortcut', 'initial_welcome', 'confirmation_flow', 'direct_menu_selection'].includes(processing_path)) {\n  console.log('⚪ Not a priority response - passing through');\n  return {\n    json: {\n      ...$json,\n      is_priority_response: false,\n      should_continue_to_flow: true\n    }\n  };\n}\n\nconsole.log('🎯 Processing priority response:', processing_path);\n\nlet response = null;\n\n// 🔧 ENHANCED: Handle initial welcome and reset scenarios\nif (processing_path === 'initial_welcome' || ($json.should_reset_conversation && $json.originalContent)) {\n  console.log('🎯 Generating initial welcome response');\n  \n  const welcomeMessage = `¡Hola! Bienvenido a Elite Training 🌎 ¿En qué podemos ayudarte hoy?\n\nResponde con el número de la opción que describa mejor tu necesidad:\n\n1️⃣ Solicitar información sobre un curso\n2️⃣ Inscribirme en un curso\n3️⃣ Ya tengo una cotización o inscripción en proceso y necesito asistencia\n4️⃣ Servicio al cliente (facturación, certificados, insignias)`;\n  \n  response = {\n    response_message: welcomeMessage,\n    response_type: 'initial_options',\n    should_send_buttons: false,\n    buttons: [],\n    set_response_timestamp: true,\n    conversation_step: null,\n    // 🔧 Update context to mark intro as sent\n    conversation_context: {\n      ...context,\n      intro_sent: true,\n      last_response_at: new Date().toISOString(),\n      conversation_started: true,\n      // Clear reset flags after successful processing\n      pending_reset: false,\n      reset_from_previous: false\n    }\n  };\n}\n\n// 🔧 ENHANCED: Handle direct menu selection\nelse if (processing_path === 'direct_menu_selection') {\n  console.log('🎯 Processing direct menu selection');\n  \n  // This will be handled by the normal flow, just pass through\n  response = {\n    response_message: null,\n    response_type: 'menu_selection',\n    should_send_buttons: false,\n    buttons: [],\n    set_response_timestamp: false,\n    // Mark that this should continue to the normal flow\n    should_continue_to_flow: true\n  };\n}\n\n// 🔧 ENHANCED: Handle confirmation flow\nelse if (processing_path === 'confirmation_flow') {\n  console.log('🎯 Generating confirmation response');\n  \n  // Determine confirmation format based on available temp data\n  let confirmationMessage = `Confirma que esta información es correcta:\\n\\n`;\n  \n  if (context?.temp_parsed_name && context?.temp_past_course && context?.temp_support_request) {\n    // Support flow format - handle different support types\n    if (context.support_type === 'facturacion') {\n      confirmationMessage += `👤 *Nombre:* ${context.temp_parsed_name}\\n📚 *Curso:* ${context.temp_past_course}\\n📄 *Tipo de solicitud:* Facturación`;\n    } else if (context.support_type === 'certificados') {\n      confirmationMessage += `👤 *Nombre:* ${context.temp_parsed_name}\\n📚 *Curso:* ${context.temp_past_course}\\n📄 *Tipo de solicitud:* Certificados`;\n    } else {\n      // Original \"otros\" format\n      confirmationMessage += `👤 *Nombre:* ${context.temp_parsed_name}\\n📚 *Curso:* ${context.temp_past_course}\\n📄 *Solicitud:* ${context.temp_support_request}`;\n    }\n  } else if (context?.course_details && context?.temp_parsed_name && context?.temp_parsed_phone) {\n    // Unscheduled course details format\n    confirmationMessage += `📚 *Curso solicitado:* ${context.course_details}\\n👤 *Nombre:* ${context.temp_parsed_name}\\n📞 *Teléfono:* ${context.temp_parsed_phone}\\n👥 *Participantes:* ${context.temp_parsed_participants || 1}`;\n  } else if (context?.temp_parsed_name && context?.temp_parsed_phone) {\n    // Registration/info flow format (including payment assistance)\n    const tempName = context?.temp_parsed_name || 'No especificado';\n    const tempPhone = context?.temp_parsed_phone || 'No especificado';\n    const tempParticipants = context?.temp_parsed_participants || 1;\n    confirmationMessage += `👤 *Nombre:* ${tempName}\\n📞 *Teléfono:* ${tempPhone}`;\n    \n    // Only show participants if it's not a payment assistance request\n    if (context.return_to_step !== 'more_info_payment') {\n      confirmationMessage += `\\n👥 *Participantes:* ${tempParticipants}`;\n    }\n  } else if (context?.temp_assistance_request && context?.temp_parsed_name) {\n    // Assistance request format\n    confirmationMessage += `👤 *Nombre:* ${context.temp_parsed_name}\\n📄 *Solicitud de asistencia:* ${context.temp_assistance_request}`;\n  } else {\n    // Fallback format\n    const tempName = context?.temp_parsed_name || 'No especificado';\n    confirmationMessage += `👤 *Nombre:* ${tempName}`;\n  }\n  \n  confirmationMessage += `\\n\\n¿Es correcta esta información?\\n\\n1️⃣ Sí, es correcto\\n2️⃣ No, quiero corregir`;\n  \n  response = {\n    response_message: confirmationMessage,\n    response_type: 'confirm_user_details',\n    should_send_buttons: false,\n    buttons: [],\n    set_response_timestamp: true\n  };\n}\n\n// 🔧 HANDLE COOLDOWN IGNORES - Don't send any response\nelse if (processing_path === 'cooldown_ignore') {\n  console.log('🤐 Ignoring message during cooldown period');\n  response = {\n    response_message: null,  // No message to send\n    response_type: step,\n    should_send_buttons: false,\n    buttons: [],\n    skip_sending: true  // Flag to prevent WhatsApp sending\n  };\n}\n\n// 🔧 ENHANCED HANDOFF RESPONSES - Handle reset scenarios\nelse if (processing_path === 'handoff') {\n  console.log('🎯 Generating handoff response');\n  const p = context?.participants_count || 1;\n  const supportType = context?.support_type;\n  \n  let msg;\n  if (supportType === 'facturacion') {\n    msg = `Gracias. Tu solicitud de facturación ha sido registrada. Un asesor se comunicará contigo en la mayor brevedad posible.`;\n  } else if (supportType === 'certificados') {\n    msg = `Gracias. Tu solicitud de certificados ha sido registrada. Un asesor se comunicará contigo en la mayor brevedad posible.`;\n  } else if (p > 1) {\n    msg = `Gracias. Tu solicitud ha sido registrada. El director de capacitación se comunicará contigo en la mayor brevedad posible.`;\n  } else {\n    msg = `Gracias. Tu solicitud ha sido registrada. Un asesor se comunicará contigo en la mayor brevedad posible.`;\n  }\n  \n  if (context?.advisor) {\n    msg = `Gracias. Tu solicitud ha sido registrada. ${context.advisor} se comunicará contigo a la mayor brevedad.`;\n  }\n  \n  // 🔧 Add reset trigger for handoff completion\n  msg += `\\n\\n🔄 Esta conversación se reiniciará automáticamente para futuras consultas.`;\n  \n  response = {\n    response_message: msg,\n    response_type: 'handoff',\n    should_send_buttons: false,\n    buttons: [],\n    set_response_timestamp: true,\n    trigger_reset_after_send: true // Flag to trigger reset after sending\n  };\n}\n\n// 🔧 ENHANCED END CONVERSATION RESPONSES - Add reset trigger\nelse if (processing_path === 'end_conversation') {\n  console.log('🎯 Generating end_conversation response');\n  response = {\n    response_message: `Gracias por conversar con *Elite Training* 🌎. ¡Estamos aquí para ti cuando quieras volver!\\n\\n🔄 Esta conversación se reiniciará automáticamente para futuras consultas.`,\n    response_type: 'end_conversation',\n    should_send_buttons: false,\n    buttons: [],\n    set_response_timestamp: true,\n    trigger_reset_after_send: true // Flag to trigger reset after sending\n  };\n}\n\n// Unknown priority path\nelse {\n  console.log('⚠️ Unknown priority path:', processing_path);\n  response = {\n    response_message: 'Lo siento, hubo un problema. ¿Puedes intentar de nuevo?',\n    response_type: 'error',\n    should_send_buttons: false,\n    buttons: [],\n    set_response_timestamp: true\n  };\n}\n\n// Apply response and update context if needed\nlet updated_json = { ...$json };\n\nif (response) {\n  updated_json.response_message = response.response_message;\n  updated_json.response_type = response.response_type;\n  updated_json.should_send_buttons = response.should_send_buttons;\n  updated_json.buttons = response.buttons || [];\n  updated_json.skip_sending = response.skip_sending || false;\n  updated_json.trigger_reset_after_send = response.trigger_reset_after_send || false;\n  updated_json.should_continue_to_flow = response.should_continue_to_flow || false;\n  \n  if (response.conversation_step !== undefined) {\n    updated_json.conversation_step = response.conversation_step;\n  }\n  \n  if (response.conversation_context) {\n    updated_json.conversation_context = response.conversation_context;\n  }\n  \n  if (response.set_response_timestamp) {\n    if (!updated_json.conversation_context) {\n      updated_json.conversation_context = context || {};\n    }\n    updated_json.conversation_context.last_response_at = new Date().toISOString();\n  }\n  \n  console.log('✅ Priority response generated:', {\n    type: response.response_type,\n    has_message: !!response.response_message,\n    skip_sending: response.skip_sending,\n    trigger_reset: response.trigger_reset_after_send,\n    continue_to_flow: response.should_continue_to_flow\n  });\n}\n\nreturn { json: updated_json };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3360,
        160
      ],
      "id": "00aff323-262e-45cf-b2ff-c0aae355e512",
      "name": "Priority Response Handler"
    },
    {
      "parameters": {
        "jsCode": "// 🔧 Node 3: Course Information Flow Handler\n// Purpose: Handle all course information and inquiry responses (Branch 1)\nconst processing_path = $json.processing_path;\nconst response_data = $json.response_data;\nconst step = response_data.step;\nconst content = response_data.content;\nconst course_matches = response_data.course_matches;\nconst unscheduled_courses = response_data.unscheduled_courses;\nconst selected_course = response_data.selected_course;\nconst has_multiple = response_data.has_multiple;\nconst has_unscheduled = response_data.has_unscheduled;\nconst context = response_data.conversation_context;\nconsole.log('=== COURSE INFO FLOW HANDLER DEBUG ===');\nconsole.log('Processing path:', processing_path);\nconsole.log('Step:', step);\n// Check if a previous handler already generated a response\nif ($json.response_message || $json.should_continue_to_flow === false) {\n  console.log('⚪ Previous handler already generated response - passing through');\n  return {\n    json: {\n      ...$json,\n      is_course_info_response: false,\n      should_continue_to_next_flow: true\n    }\n  };\n}\n// Only process if this is a course info flow\nif (processing_path !== 'course_info_flow') {\n  console.log('⚪ Not a course info flow - passing through');\n  return {\n    json: {\n      ...$json,\n      is_course_info_response: false,\n      should_continue_to_next_flow: true\n    }\n  };\n}\nconsole.log('🎯 Processing course info flow:', step);\n// 🔧 UNIFIED PRICE FORMATTER - Fixed version\nfunction formatPrice(price) {\n  console.log('formatPrice input:', price, 'type:', typeof price);\n \n  if (!price || price === 'Consultar' || price === 'Por confirmar') {\n    return price;\n  }\n \n  // If it's already formatted with US$, extract the number and reformat\n  if (typeof price === 'string' && price.includes('US$')) {\n    const match = price.match(/US\\$?([ד,]+\\.?\\d*)/);\n    if (match) {\n      const numValue = parseFloat(match[1].replace(/,/g, ''));\n      if (!isNaN(numValue)) {\n        return `US$${numValue.toLocaleString('en-US', {\n          minimumFractionDigits: 2,\n          maximumFractionDigits: 2\n        })} +IVA`;\n      }\n    }\n  }\n \n  // If it's a number, format directly\n  if (typeof price === 'number') {\n    return `US$${price.toLocaleString('en-US', {\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2\n    })} +IVA`;\n  }\n \n  // If it's a string number\n  if (typeof price === 'string') {\n    const numValue = parseFloat(price.replace(/[^\\d.-]/g, ''));\n    if (!isNaN(numValue)) {\n      return `US$${numValue.toLocaleString('en-US', {\n        minimumFractionDigits: 2,\n        maximumFractionDigits: 2\n      })} +IVA`;\n    }\n  }\n \n  console.log('formatPrice fallback for:', price);\n  return price;\n}\nlet response = null;\nlet updated_context = { ...context }; // For setting new steps\n// Branch 1: ask course name\nif (step === 'info_curso_ask_name') {\n  console.log('🎯 Generating info_curso_ask_name response');\n  response = {\n    response_message: `Por favor, escribe con el mayor detalle posible el nombre del curso que te interesa.`,\n    response_type: 'ask_course_name',\n    should_send_buttons: false,\n    buttons: [],\n    set_response_timestamp: true\n  };\n}\n// Branch 1: confirm courses found\nelse if (step === 'info_curso_confirm') {\n  console.log('🎯 Generating info_curso_confirm response');\n  let response_message = '';\n  if (has_multiple) {\n    const list = course_matches.map((c,i) =>\n      `${i+1}️⃣ ${c.nombre} (${c.codigo})\\n${c.fecha_formatted}`\n    ).join('\\n\\n');\n    const base = `Tenemos estos cursos programados:\\n\\n${list}\\n\\nEscribe el número del curso que te interesa`;\n    response_message = has_unscheduled\n      ? `${base} o escribe *otros* para ver cursos sin fecha confirmada.`\n      : `${base} o escribe *no* si ninguno es el que buscas.`;\n  } else if (course_matches.length === 1) {\n    const c = course_matches[0];\n    const info = `${c.nombre} (${c.codigo})\\n${c.fecha_formatted}`;\n    let base = `¿Este es el curso que buscas?\\n\\n${info}\\n\\n1️⃣ Sí`;\n    if (has_unscheduled) {\n      base += `\\n2️⃣ Ver cursos sin fecha confirmada\\n3️⃣ Buscar otro curso`;\n    } else {\n      base += `\\n2️⃣ Buscar otro curso`;\n    }\n    response_message = base;\n  } else if (has_unscheduled && course_matches.length === 0) {\n    response_message = `No encontramos cursos programados que coincidan exactamente con tu búsqueda, pero tenemos cursos relacionados sin fecha confirmada. ¿Te gustaría verlos?\\n\\n1️⃣ Sí, mostrar cursos sin fecha\\n2️⃣ Buscar nuevamente`;\n  } else {\n    response_message = `No encontramos cursos que coincidan con tu búsqueda. ¿Podrías ser más específico sobre el curso que buscas?\\n\\n1️⃣ Intentar otra búsqueda\\n2️⃣ Hablar con un asesor`;\n  }\n  response = {\n    response_message,\n    response_type: 'confirm_course',\n    should_send_buttons: false,\n    buttons: [],\n    set_response_timestamp: true\n  };\n}\n// Branch 1: show unscheduled list\nelse if (step === 'info_curso_show_unscheduled') {\n  console.log('🎯 Generating info_curso_show_unscheduled response');\n  const list = unscheduled_courses.slice(0,5).map((c,i) =>\n    `${i+1}️⃣ ${c.nombre} (${c.codigo})`\n  ).join('\\n\\n');\n  response = {\n    response_message: `Estos son los cursos sin fecha confirmada relacionados con tu búsqueda:\\n\\n${list}\\n\\nEscribe el número del curso que te interesa, o:\\n\\n🔄 Escribe *nuevo* para iniciar una nueva búsqueda\\n❌ Escribe *ninguno* si ninguno de estos cursos es el que buscas`,\n    response_type: 'show_unscheduled',\n    should_send_buttons: false,\n    buttons: [],\n    set_response_timestamp: true\n  };\n}\n// Branch 1: unscheduled none details\nelse if (step === 'unscheduled_none_details') {\n  console.log('🎯 Generating unscheduled_none_details response');\n  response = {\n    response_message: `Por favor, escribe el nombre del curso que buscas, tu nombre completo, número de teléfono y la cantidad de participantes que necesitas para el curso.\\n\\nEjemplo: \"Curso de soldadura, Juan Pérez, 3001234567, 5 personas\"`,\n    response_type: 'ask_unscheduled_none_details',\n    should_send_buttons: false,\n    buttons: [],\n    set_response_timestamp: true\n  };\n}\n// Branch 1: unscheduled interest\nelse if (step === 'unscheduled_course_interest') {\n  console.log('🎯 Generating unscheduled_course_interest response');\n  response = {\n    response_message: `Si estás interesado en este curso, por favor escribe tu nombre completo, número de teléfono y la cantidad de participantes que necesitas para el curso.\\n\\nEjemplo: \"Juan Pérez, 3001234567, 5 personas\"`,\n    response_type: 'ask_unscheduled_interest',\n    should_send_buttons: false,\n    buttons: [],\n    set_response_timestamp: true\n  };\n}\n// Branch 1: direct selection prompt\nelse if (step === 'info_curso_select') {\n  console.log('🎯 Generating info_curso_select response');\n  const list = course_matches.map((c,i) =>\n    `${i+1}️⃣ ${c.nombre} (${c.codigo})`\n  ).join('\\n\\n');\n  response = {\n    response_message: `Selecciona el curso escribiendo el número:\\n\\n${list}`,\n    response_type: 'select_course',\n    should_send_buttons: false,\n    buttons: [],\n    set_response_timestamp: true\n  };\n}\n// Branch 1: no details fallback\nelse if (step === 'info_curso_no_details') {\n  console.log('🎯 Generating info_curso_no_details response');\n  response = {\n    response_message: `Por favor, escribe detalladamente el nombre del curso que buscas, tu nombre completo y número de teléfono.`,\n    response_type: 'ask_no_details',\n    should_send_buttons: false,\n    buttons: [],\n    set_response_timestamp: true\n  };\n}\n// Branch 1: show course info - FIXED WITH CORRECT PRICE FORMATTING AND MESSAGE FORMATTING\nelse if (step === 'info_curso_show_info') {\n  console.log('🎯 Generating info_curso_show_info response');\n  if (!selected_course) {\n    response = {\n      response_message: 'Lo siento, no pude identificar el curso seleccionado. Por favor elige de nuevo.',\n      response_type: 'course_not_found',\n      should_send_buttons: false,\n      buttons: [],\n      set_response_timestamp: true\n    };\n  } else {\n    const c = selected_course;\n    const url = c.url || `https://elite-training.com/courses/${c.codigo}`;\n    // 🔧 FIXED: Use discounted_price if available, otherwise fall back to precio\n    const rawPrice = c.discounted_price || c.precio || 'Consultar';\n    const formattedPrice = formatPrice(rawPrice);\n    console.log('🔧 Price formatting debug:', {\n      rawPrice,\n      formattedPrice,\n      discounted_price: c.discounted_price,\n      precio: c.precio\n    });\n    let info = `${c.nombre}\\nModalidad: ${c.modalidad}\\nFecha: ${c.fecha_formatted}`;\n    if (c.ciudad && c.ciudad.toLowerCase() !== 'no aplica') {\n      info += `\\nCiudad: ${c.ciudad}`;\n    }\n    info += `\\nDuración: ${c.duracion}`;\n    if (c.instructor && c.instructor.trim() !== '') {\n      info += `\\nInstructor: ${c.instructor}`;\n    }\n    info += `\\nPrecio: ${formattedPrice}\\n\\n🔗 Más info: ${url}`;\n    const isUnsch = !c.fecha ||\n      c.fecha.toLowerCase().includes('por confirmar') ||\n      c.fecha.toLowerCase().includes('por definir');\n    if (isUnsch) {\n      response = {\n        response_message: `${info}\\n\\nSi estás interesado en este curso, por favor escribe tu nombre completo, número de teléfono y la cantidad de participantes que necesitas para el curso.\\n\\nEjemplo: \"Juan Pérez, 3001234567, 5 personas\"\\n\\n👉 O escribe *finalizar* para cerrar esta conversación.`,\n        response_type: 'show_unscheduled_course_info',\n        should_send_buttons: false,\n        buttons: [],\n        set_response_timestamp: true\n      };\n    } else {\n      response = {\n        response_message: `${info}\\n\\n¿Qué deseas hacer ahora?\\n\\n1️⃣ Solicitar más información\\n2️⃣ Iniciar proceso de inscripción`,\n        response_type: 'show_course_info',\n        should_send_buttons: false,\n        buttons: [],\n        set_response_timestamp: true\n      };\n    }\n  }\n}\n// Branch 1: more info topic\nelse if (step === 'more_info_ask_topic') {\n  console.log('🎯 Generating more_info_ask_topic response');\n  response = {\n    response_message: `Indícanos sobre qué tema necesitas información adicional:\\n\\n1️⃣ Formas de pago\\n2️⃣ Descuentos para grupos\\n3️⃣ Otros temas`,\n    response_type: 'ask_more_topic',\n    should_send_buttons: false,\n    buttons: [],\n    set_response_timestamp: true\n  };\n}\n// Branch 1: more_info_payment - Ask for contact details (UPDATED)\nelse if (step === 'more_info_payment') {\n  console.log('🎯 Generating more_info_payment response');\n  response = {\n    response_message: `💳 Formas de pago disponibles:\n•⁠ ⁠Transferencia bancaria a la cuenta indicada en la factura\n•⁠ ⁠Tarjeta de crédito o débito (procesadas vía PayU Latam, PayPal o Mercado Pago)\n•⁠ ⁠Pagos en efectivo en oficinas autorizadas\n•⁠ ⁠Financiación (consultar condiciones)\n📋 Consulta el procedimiento completo de pagos aquí:\n🔗 https://hidrocarburos.com.co/procedimiento-de-pagos/\nPara asistencia personalizada con tu método de pago, proporciona:\n👤 Tu nombre completo\n📞 Número de teléfono\nEjemplo: \"Juan Pérez, 3001234567\"`,\n    response_type: 'ask_payment_details',\n    should_send_buttons: false,\n    buttons: [],\n    set_response_timestamp: true\n  };\n  updated_context.current_step = 'awaiting_payment_details'; // Set for next message processing\n}\n// NEW: Handle payment details input and show confirmation\nelse if (step === 'awaiting_payment_details') {\n  console.log('🎯 Generating awaiting_payment_details response');\n  // Parse free text for name and phone (simple split by comma)\n  const parts = content.split(',');\n  const temp_name = parts[0]?.trim() || 'Usuario';\n  const temp_phone = parts[1]?.trim() || '';\n  \n  // Basic validation\n  if (!temp_name || !temp_phone) {\n    response = {\n      response_message: 'Por favor, proporciona tu nombre completo y número de teléfono separados por coma (ej: Nombre, 123456789).',\n      response_type: 'invalid_payment_details',\n      should_send_buttons: false,\n      buttons: [],\n      set_response_timestamp: true\n    };\n    updated_context.current_step = 'awaiting_payment_details'; // Stay in this step\n  } else {\n    response = {\n      response_message: `Confirma que esta información es correcta:\\n👤 Nombre: ${temp_name}\\n📞 Teléfono: ${temp_phone}\\n¿Es correcta esta información?\\n1️⃣ Sí, es correcto\\n2️⃣ No, quiero corregir`,\n      response_type: 'confirm_payment_details',\n      should_send_buttons: false,\n      buttons: [],\n      set_response_timestamp: true\n    };\n    updated_context.temp_name = temp_name;\n    updated_context.temp_phone = temp_phone;\n    updated_context.current_step = 'awaiting_confirmation';\n    updated_context.awaiting_selection = true; // Prevent treating 1/2 as top-level menu\n  }\n}\n// NEW: Handle confirmation response\nelse if (step === 'awaiting_confirmation') {\n  console.log('🎯 Generating awaiting_confirmation response');\n  const option = parseInt(content, 10);\n  if (option === 1) {\n    updated_context.user_provided_name = updated_context.temp_name;\n    updated_context.user_provided_phone = updated_context.temp_phone; // Saves to context for Airtable\n    response = {\n      response_message: `Gracias, hemos confirmado tu información.\\nUn asesor te contactará pronto al ${updated_context.temp_phone} para asistencia con el pago.`,\n      response_type: 'payment_assistance_confirmed',\n      should_send_buttons: false,\n      buttons: [],\n      set_response_timestamp: true\n    };\n    updated_context.current_step = ''; // Reset step\n    updated_context.handoff = true; // Trigger human handoff if supported\n    updated_context.awaiting_selection = false;\n  } else if (option === 2) {\n    response = {\n      response_message: 'Por favor, proporciona de nuevo tu nombre completo y número de teléfono.',\n      response_type: 'retry_payment_details',\n      should_send_buttons: false,\n      buttons: [],\n      set_response_timestamp: true\n    };\n    updated_context.current_step = 'awaiting_payment_details';\n    updated_context.temp_name = null;\n    updated_context.temp_phone = null;\n    updated_context.awaiting_selection = false;\n  } else {\n    response = {\n      response_message: 'Lo siento, no entendí. ¿Podrías intentarlo de nuevo? Responde con 1 o 2.',\n      response_type: 'invalid_confirmation',\n      should_send_buttons: false,\n      buttons: [],\n      set_response_timestamp: true\n    };\n    updated_context.current_step = 'awaiting_confirmation'; // Stay in confirmation\n  }\n}\n// Branch 1: more_info_group_discount - Ask for group details\nelse if (step === 'more_info_group_discount') {\n  console.log('🎯 Generating more_info_group_discount response');\n  response = {\n    response_message: `💰 *Descuentos para grupos disponibles*\n🎯 Ofrecemos descuentos especiales para grupos de 2 o más participantes.\nPara cotizar tu descuento grupal, por favor proporciona:\n👤 Tu nombre completo\n📞 Número de teléfono\n👥 Cantidad de participantes\nEjemplo: \"Juan Pérez, 3001234567, 8 participantes\"`,\n    response_type: 'ask_group_discount_details',\n    should_send_buttons: false,\n    buttons: [],\n    set_response_timestamp: true\n  };\n}\n// Branch 1: more_info_other_details - Ask for other inquiry details\nelse if (step === 'more_info_other_details') {\n  console.log('🎯 Generating more_info_other_details response');\n  response = {\n    response_message: `Por favor, escribe tu nombre, número de teléfono y describe tu consulta con el mayor detalle posible.\\n\\nEjemplo: \"Juan Pérez, 3001234567, necesito información sobre requisitos técnicos para el curso\"`,\n    response_type: 'ask_other_details',\n    should_send_buttons: false,\n    buttons: [],\n    set_response_timestamp: true\n  };\n}\nif (response) {\n  console.log('✅ Course info response generated:', response.response_type);\n  return {\n    json: {\n      ...$json,\n      is_course_info_response: true,\n      should_continue_to_next_flow: false,\n      response_message: response.response_message,\n      response_type: response.response_type,\n      should_send_buttons: response.should_send_buttons,\n      buttons: response.buttons,\n      set_response_timestamp: response.set_response_timestamp,\n      conversation_context: updated_context // Updated with new steps\n    }\n  };\n} else {\n  console.log('⚪ No course info response generated for step:', step);\n  return {\n    json: {\n      ...$json,\n      is_course_info_response: false,\n      should_continue_to_next_flow: true\n    }\n  };\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3136,
        160
      ],
      "id": "f5991d4a-2380-43ad-a13a-c5569f74dae0",
      "name": "Course Information Flow Handler"
    },
    {
      "parameters": {
        "jsCode": "// 🔧 Node 4: Registration Flow Handler - FIXED with \"ninguno\" option\n// Purpose: Handle all registration and enrollment responses (Branch 2)\n\nconst processing_path      = $json.processing_path;\nconst response_data        = $json.response_data;\nconst step                 = response_data.step;\nconst content              = response_data.content;\nconst course_matches       = response_data.course_matches;\nconst unscheduled_courses  = response_data.unscheduled_courses;\nconst selected_course      = response_data.selected_course;\nconst has_multiple         = response_data.has_multiple;\nconst has_unscheduled      = response_data.has_unscheduled;\nconst context              = response_data.conversation_context;\n\nconsole.log('=== REGISTRATION FLOW HANDLER DEBUG ===');\nconsole.log('Processing path:', processing_path);\nconsole.log('Step:', step);\n\n// Check if a previous handler already generated a response\nif ($json.response_message || $json.should_continue_to_flow === false) {\n  console.log('⚪ Previous handler already generated response - passing through');\n  return {\n    json: {\n      ...$json,\n      is_registration_response: false,\n      should_continue_to_next_flow: true\n    }\n  };\n}\n\n// Only process if this is a registration flow\nif (processing_path !== 'registration_flow') {\n  console.log('⚪ Not a registration flow - passing through');\n  return {\n    json: {\n      ...$json,\n      is_registration_response: false,\n      should_continue_to_next_flow: true\n    }\n  };\n}\n\nconsole.log('🎯 Processing registration flow:', step);\n\n// 🔧 UNIFIED PRICE FORMATTER - Fixed version\nfunction formatPrice(price) {\n  console.log('formatPrice input:', price, 'type:', typeof price);\n  \n  if (!price || price === 'Consultar' || price === 'Por confirmar') {\n    return price;\n  }\n  \n  // If it's already formatted with US$, extract the number and reformat\n  if (typeof price === 'string' && price.includes('US$')) {\n    const match = price.match(/US\\$?([\\\\d,]+\\.?\\\\d*)/);\n    if (match) {\n      const numValue = parseFloat(match[1].replace(/,/g, ''));\n      if (!isNaN(numValue)) {\n        return `US$${numValue.toLocaleString('en-US', {\n          minimumFractionDigits: 2,\n          maximumFractionDigits: 2\n        })} +IVA`;\n      }\n    }\n  }\n  \n  // If it's a number, format directly\n  if (typeof price === 'number') {\n    return `US$${price.toLocaleString('en-US', {\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2\n    })} +IVA`;\n  }\n  \n  // If it's a string number\n  if (typeof price === 'string') {\n    const numValue = parseFloat(price.replace(/[^\\\\d.-]/g, ''));\n    if (!isNaN(numValue)) {\n      return `US$${numValue.toLocaleString('en-US', {\n        minimumFractionDigits: 2,\n        maximumFractionDigits: 2\n      })} +IVA`;\n    }\n  }\n  \n  console.log('formatPrice fallback for:', price);\n  return price;\n}\n\nlet response = null;\n\n// Branch 2: ask course for registration (FIRST STEP)\nif (step === 'inscripcion_ask_course') {\n  console.log('✅ Generating inscripcion_ask_course response');\n  response = {\n    response_message: '¿En qué curso te interesa inscribirte? Por favor escribe el nombre del curso con el mayor detalle posible.',\n    response_type: 'ask_inscription_course',\n    should_send_buttons: false,\n    buttons: [],\n    set_response_timestamp: true\n  };\n}\n\n// Branch 2: confirm course for registration (SECOND STEP) - 🔧 FIXED with \"ninguno\" option\nelse if (step === 'inscripcion_confirm_course') {\n  console.log('✅ Generating inscripcion_confirm_course response');\n  let response_message = '';\n\n  if (has_multiple) {\n    const list = course_matches.map((c, i) => {\n      const rawPrice = c.discounted_price || c.precio;\n      console.log(`Course ${i+1} price debug:`, {\n        nombre: c.nombre,\n        rawPrice,\n        rawPriceType: typeof rawPrice\n      });\n      \n      let courseInfo = `${i+1}️⃣ ${c.nombre} (${c.codigo})\\n📅 ${c.fecha_formatted}`;\n      if (rawPrice) courseInfo += `\\n💰 ${formatPrice(rawPrice)}`;\n      if (c.instructor && c.instructor.trim() !== '') {\n        courseInfo += `\\n👨‍🏫 ${c.instructor}`;\n      }\n      return courseInfo;\n    }).join('\\n\\n');\n\n    // 🔧 FIXED: Added \"ninguno\" option for when none of the courses match (no unscheduled courses in registration flow)\n    response_message = `Perfecto. Encontramos estos cursos disponibles:\\n\\n${list}\\n\\nEscribe el número del curso en el que te quieres inscribir o escribe *ninguno* si ninguno de estos cursos es el que buscas.`;\n  }\n  else if (course_matches.length === 1) {\n    const c = course_matches[0];\n    const rawPrice = c.discounted_price || c.precio;\n    console.log('Single course price debug:', {\n      nombre: c.nombre,\n      rawPrice,\n      rawPriceType: typeof rawPrice\n    });\n    \n    let info = `${c.nombre} (${c.codigo})\\n📅 ${c.fecha_formatted}`;\n    if (rawPrice) info += `\\n💰 ${formatPrice(rawPrice)}`;\n    if (c.modalidad) info += `\\n📍 ${c.modalidad}`;\n    if (c.instructor && c.instructor.trim() !== '') {\n      info += `\\n👨‍🏫 ${c.instructor}`;\n    }\n    response_message = `¿Te quieres inscribir en este curso?\\n\\n${info}\\n\\n1️⃣ Sí, inscribirme en este curso\\n2️⃣ Buscar otro curso`;\n  }\n  else if (has_unscheduled && course_matches.length === 0) {\n    response_message = `No encontramos cursos programados que coincidan exactamente con tu búsqueda, pero tenemos cursos relacionados sin fecha confirmada. ¿Te gustaría verlos?\\n\\n1️⃣ Sí, mostrar cursos sin fecha\\n2️⃣ Buscar nuevamente`;\n  }\n  else {\n    response_message = `No encontramos cursos que coincidan con tu búsqueda. ¿Podrías ser más específico sobre el curso en el que te quieres inscribir?`;\n  }\n\n  response = {\n    response_message,\n    response_type: 'confirm_inscription_course',\n    should_send_buttons: false,\n    buttons: [],\n    set_response_timestamp: true\n  };\n}\n\n// Branch 2: show unscheduled for registration\nelse if (step === 'inscripcion_show_unscheduled') {\n  console.log('✅ Generating inscripcion_show_unscheduled response');\n  const list = unscheduled_courses.map((c,i) =>\n    `${i+1}️⃣ ${c.nombre} (${c.codigo})`\n  ).join('\\n\\n');\n  response = {\n    response_message: `Estos son los cursos sin fecha confirmada relacionados con tu búsqueda:\\n\\n${list}\\n\\nEscribe el número del curso en el que te quieres inscribir, o:\\n\\n🔄 Escribe *nuevo* para buscar otro curso\\n❌ Escribe *ninguno* si ninguno de estos cursos es el que buscas`,\n    response_type: 'show_unscheduled_inscription',\n    should_send_buttons: false,\n    buttons: [],\n    set_response_timestamp: true\n  };\n}\n\n// Branch 2: ask details full - FIXED PRICE AND MESSAGE FORMATTING\nelse if (step === 'inscripcion_ask_details_full') {\n  console.log('✅ Generating inscripcion_ask_details_full response');\n  const courseInfo = selected_course\n    ? `\\n\\n📋 *Curso seleccionado:* ${selected_course.nombre} (${selected_course.codigo})`\n    : '';\n  const hasReservaLink = selected_course && selected_course.reserva_link && selected_course.reserva_link.trim() !== '';\n  let courseDetails = courseInfo;\n  if (hasReservaLink) {\n    if (selected_course.modalidad) courseDetails += `\\n📍 *Modalidad:* ${selected_course.modalidad}`;\n    if (selected_course.fecha_formatted) courseDetails += `\\n📅 *Fecha:* ${selected_course.fecha_formatted}`;\n    if (selected_course.instructor && selected_course.instructor.trim() !== '') {\n      courseDetails += `\\n👨‍🏫 *Instructor:* ${selected_course.instructor}`;\n    }\n    const rawPrice = selected_course.discounted_price || selected_course.precio || 'Consultar';\n    console.log('Ask details full price debug:', {\n      rawPrice,\n      formattedPrice: formatPrice(rawPrice)\n    });\n    courseDetails += `\\n💰 *Precio:* ${formatPrice(rawPrice)}`;\n    courseDetails += `\\n\\n🔗 *Enlace de inscripción:*\\n${selected_course.reserva_link}\\n\\n👆 Haz clic en el enlace para completar tu inscripción de manera segura.`;\n  }\n  response = {\n    response_message: `¡Excelente elección!${courseDetails}\\n\\nPor favor, escribe tu nombre completo, número de teléfono y el número de participantes para el curso.\\n\\nEjemplo: \\\"Juan Pérez, 3001234567, 3\\\"`,\n    response_type: 'ask_inscripcion_details_full',\n    should_send_buttons: false,\n    buttons: [],\n    set_response_timestamp: true\n  };\n}\n\n// Branch 2: details collected\nelse if (step === 'inscripcion_details_collected') {\n  console.log('✅ Generating inscripcion_details_collected response');\n  const userName = context && context.user_name ? context.user_name : 'Usuario';\n  const userPhone = context && context.user_phone ? context.user_phone : '';\n  const participantsCount = context && context.participants_count ? context.participants_count : 1;\n  response = {\n    response_message: `Gracias. Hemos registrado tu información:\\n👤 *Nombre:* ${userName}\\n📞 *Teléfono:* ${userPhone}\\n👥 *Participantes:* ${participantsCount}\\n\\n¿Qué deseas hacer ahora?\\n\\n1️⃣ Que un asesor me contacte para asistencia adicional\\n2️⃣ Finalizar conversación`,\n    response_type: 'registration_details_collected',\n    should_send_buttons: false,\n    buttons: [],\n    set_response_timestamp: true\n  };\n}\n\n// Branch 2: post-reservation assistance\nelse if (step === 'post_reservation_assistance') {\n  console.log('✅ Generating post_reservation_assistance response');\n  response = {\n    response_message: `Por favor, describe en qué necesitas asistencia específicamente.\\n\\nEjemplo: \\\"Necesito ayuda con el proceso de pago\\\" o \\\"Tengo preguntas sobre el horario del curso\\\"`,\n    response_type: 'ask_post_reservation_assistance',\n    should_send_buttons: false,\n    buttons: [],\n    set_response_timestamp: true\n  };\n}\n\n// Branch 2: final thank you\nelse if (step === 'registration_complete_thanks') {\n  console.log('✅ Generating registration_complete_thanks response');\n  response = {\n    response_message: `¡Perfecto! Gracias por tu interés en *Elite Training* 🌎.\\n\\n✅ Tienes toda la información necesaria para completar tu inscripción.\\n\\n¡Esperamos verte pronto en nuestros cursos!`,\n    response_type: 'registration_final_thanks',\n    should_send_buttons: false,\n    buttons: [],\n    set_response_timestamp: true\n  };\n}\n\n// Branch 2: legacy ask details\nelse if (step === 'inscripcion_ask_details') {\n  console.log('✅ Generating inscripcion_ask_details response');\n  const courseInfo = selected_course\n    ? `\\n\\n📋 *Curso seleccionado:* ${selected_course.nombre} (${selected_course.codigo})`\n    : '';\n  response = {\n    response_message: `Excelente elección!${courseInfo}\\n\\nPara proceder con tu inscripción, por favor proporciona:\\n\\n👤 Tu nombre completo\\n📞 Número de teléfono\\n👥 Cantidad de participantes\\n\\nEjemplo: \\\"Juan Pérez, 3001234567, 5 personas\\\"`,\n    response_type: 'ask_inscripcion_details',\n    should_send_buttons: false,\n    buttons: [],\n    set_response_timestamp: true\n  };\n}\n\n// Branch 2: show registration form\nelse if (step === 'inscripcion_show_form') {\n  console.log('✅ Generating inscripcion_show_form response');\n  const reservationLink = selected_course && selected_course.reserva_link\n    ? selected_course.reserva_link\n    : 'https://elite-training.com/formulario-inscripcion';\n  const courseInfo = selected_course\n    ? `\\n\\n📋 *Curso:* ${selected_course.nombre} (${selected_course.codigo})`\n    : '';\n  const userInfo = context && context.user_name\n    ? `\\n👤 *Nombre:* ${context.user_name}\\n📞 *Teléfono:* ${context.user_phone}`\n    : '';\n  const participantsInfo = context && context.participants_count\n    ? `\\n👥 *Participantes:* ${context.participants_count}`\n    : '';\n  response = {\n    response_message: `¡Perfecto! Aquí tienes toda la información para completar tu inscripción:${courseInfo}${userInfo}${participantsInfo}\\n\\n🔗 *Formulario de inscripción:*\\n${reservationLink}\\n\\n¿Necesitas algo más?\\n\\n1️⃣ Finalizar conversación\\n2️⃣ Que un asesor me contacte`,\n    response_type: 'show_form',\n    should_send_buttons: false,\n    buttons: [],\n    set_response_timestamp: true\n  };\n}\n\nif (response) {\n  console.log('✅ Registration response generated:', response.response_type);\n  return {\n    json: {\n      ...$json,\n      is_registration_response: true,\n      should_continue_to_next_flow: false,\n      response_message: response.response_message,\n      response_type: response.response_type,\n      should_send_buttons: response.should_send_buttons,\n      buttons: response.buttons,\n      set_response_timestamp: response.set_response_timestamp,\n      conversation_context: context\n    }\n  };\n} else {\n  console.log('⚪ No registration response generated for step:', step);\n  return {\n    json: {\n      ...$json,\n      is_registration_response: false,\n      should_continue_to_next_flow: true\n    }\n  };\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2912,
        160
      ],
      "id": "40eacc39-b958-4c83-8337-06d0396c25fb",
      "name": "Registration Flow Handler"
    },
    {
      "parameters": {
        "jsCode": "// 🔧 Node 5: Support & Assistance Flow Handler - FIXED WITH COURSE STEP\n// Purpose: Handle support, assistance, and fallback responses (Branches 3 & 4 + Fallback)\n\nconst processing_path = $json.processing_path;\nconst response_data = $json.response_data;\nconst step = response_data.step;\nconst content = response_data.content;\nconst context = response_data.conversation_context;\n\nconsole.log('=== SUPPORT & ASSISTANCE FLOW HANDLER DEBUG ===');\nconsole.log('Processing path:', processing_path);\nconsole.log('Step:', step);\nconsole.log('Previous response message exists:', !!$json.response_message);\nconsole.log('Should continue to flow:', $json.should_continue_to_flow);\n\n// Check if a previous handler already generated a response\nif ($json.response_message || $json.should_continue_to_flow === false) {\n  console.log('⚪ Previous handler already generated response - passing through without fallback');\n  return {\n    json: {\n      ...$json,\n      is_support_assistance_response: false,\n      is_fallback_response: false,\n      should_continue_to_next_flow: false\n    }\n  };\n}\n\n// Process support/assistance flows OR provide fallback\nlet response = null;\n\n// Branch 3: Assistance Flow - FIXED WITH COURSE STEP\nif (step === 'asistencia_ask_name') {\n  console.log('🎯 Generating asistencia_ask_name response');\n  response = {\n    response_message: `Por favor, escribe tu nombre completo.`,\n    response_type: 'ask_asistencia_name',\n    should_send_buttons: false,\n    buttons: [],\n    set_response_timestamp: true\n  };\n}\n\n// 🔧 NEW: Ask for course in assistance flow\nelse if (step === 'asistencia_ask_course') {\n  console.log('🎯 Generating asistencia_ask_course response');\n  response = {\n    response_message: `¿En qué curso o proceso estás trabajando con nosotros?`,\n    response_type: 'ask_asistencia_course',\n    should_send_buttons: false,\n    buttons: [],\n    set_response_timestamp: true\n  };\n}\n\nelse if (step === 'asistencia_ask_advisor') {\n  console.log('🎯 Generating asistencia_ask_advisor response');\n  response = {\n    response_message: `Gracias. ¿Con quién estás llevando el proceso?\\n\\n1️⃣ Felipe Troncoso\\n2️⃣ Miller Rodríguez`,\n    response_type: 'ask_advisor',\n    should_send_buttons: false,\n    buttons: [],\n    set_response_timestamp: true\n  };\n}\n\n// Branch 4: Support Flow\nelse if (step === 'soporte_ask_type') {\n  console.log('🎯 Generating soporte_ask_type response');\n  response = {\n    response_message: `¿Necesitas ayuda de facturación, de certificados u otros?\\n\\n1️⃣ Facturación\\n2️⃣ Certificados\\n3️⃣ Otros`,\n    response_type: 'ask_soporte_type',\n    should_send_buttons: false,\n    buttons: [],\n    set_response_timestamp: true\n  };\n}\n\n// 🔧 FIXED: soporte_facturacion_ask_details - Ask for name and course for billing (NO EJEMPLO)\nelse if (step === 'soporte_facturacion_ask_details') {\n  console.log('🎯 Generating soporte_facturacion_ask_details response');\n  response = {\n    response_message: `Para ayudarte con tu solicitud de facturación, por favor proporciona:\\n\\n👤 Tu nombre completo\\n📚 Nombre del curso`,\n    response_type: 'ask_facturacion_details',\n    should_send_buttons: false,\n    buttons: [],\n    set_response_timestamp: true\n  };\n}\n\n// 🔧 FIXED: soporte_certificados_ask_details - Ask for name and course for certificates (NO EJEMPLO)\nelse if (step === 'soporte_certificados_ask_details') {\n  console.log('🎯 Generating soporte_certificados_ask_details response');\n  response = {\n    response_message: `Para ayudarte con tu solicitud de certificados, por favor proporciona:\\n\\n👤 Tu nombre completo\\n📚 Nombre del curso`,\n    response_type: 'ask_certificados_details',\n    should_send_buttons: false,\n    buttons: [],\n    set_response_timestamp: true\n  };\n}\n\nelse if (step === 'soporte_ask_details') {\n  console.log('🎯 Generating soporte_ask_details response');\n  response = {\n    response_message: `Por favor, escribe tu nombre, el curso en el que participaste y describe tu solicitud.`,\n    response_type: 'ask_soporte_details',\n    should_send_buttons: false,\n    buttons: [],\n    set_response_timestamp: true\n  };\n}\n\n// Fallback for any unhandled cases\nelse {\n  console.log('⚠️ Hit fallback response - Step:', step, 'Content:', content, 'Path:', processing_path);\n  response = {\n    response_message: 'Lo siento, no entendí. ¿Podrías intentarlo de nuevo?',\n    response_type: 'fallback',\n    should_send_buttons: false,\n    buttons: [],\n    set_response_timestamp: true\n  };\n}\n\nif (response) {\n  console.log('✅ Support/assistance/fallback response generated:', response.response_type);\n  \n  const is_support_assistance = processing_path === 'support_assistance_flow';\n  const is_fallback = response.response_type === 'fallback' || response.response_type === 'support_assistance_error';\n  \n  return {\n    json: {\n      ...$json,\n      is_support_assistance_response: is_support_assistance,\n      is_fallback_response: is_fallback,\n      should_continue_to_next_flow: false,\n      response_message: response.response_message,\n      response_type: response.response_type,\n      should_send_buttons: response.should_send_buttons,\n      buttons: response.buttons,\n      set_response_timestamp: response.set_response_timestamp\n    }\n  };\n} else {\n  console.log('❌ No response generated - this should not happen in fallback handler');\n  return {\n    json: {\n      ...$json,\n      is_support_assistance_response: false,\n      is_fallback_response: true,\n      should_continue_to_next_flow: false,\n      response_message: 'Error interno. Intenta de nuevo.',\n      response_type: 'internal_error',\n      should_send_buttons: false,\n      buttons: [],\n      set_response_timestamp: true,\n      error_details: 'Support & Assistance Flow Handler failed to generate any response'\n    }\n  };\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2688,
        160
      ],
      "id": "e98a49f0-d60b-4c52-8203-3ce92a633084",
      "name": "Support & Assistance Flow Handler"
    },
    {
      "parameters": {
        "jsCode": "// 🔧 FIXED: Response Finalizer - Ensures phone_e164 is always available\n// Purpose: Final response formatting, timestamp management, and output preparation\nconst set_response_timestamp = $json.set_response_timestamp;\nconst skip_sending = $json.skip_sending;\nconst response_message = $json.response_message;\nconst response_type = $json.response_type;\n// 🔧 FIXED: Robust phone number extraction with multiple fallbacks\nlet phone_e164 = $json.phone_e164 ||\n                $json.response_data?.phone_e164 ||\n                $json.to ||\n                $json.from ||\n                $json.messages?.[0]?.from ||\n                $json.contacts?.[0]?.wa_id;\nconsole.log('=== RESPONSE FINALIZER DEBUG ===');\nconsole.log('Response type:', response_type);\nconsole.log('Set timestamp:', set_response_timestamp);\nconsole.log('Skip sending:', skip_sending);\nconsole.log('Has response message:', !!response_message);\nconsole.log('Phone E164 sources:', {\n  json_phone_e164: $json.phone_e164,\n  response_data_phone: $json.response_data?.phone_e164,\n  json_to: $json.to,\n  json_from: $json.from,\n  messages_from: $json.messages?.[0]?.from,\n  contacts_wa_id: $json.contacts?.[0]?.wa_id,\n  final_phone_e164: phone_e164\n});\n// Handle timestamp management\nlet updated_conversation_context = $json.conversation_context || {};\n// Ensure context is object\nif (typeof updated_conversation_context === 'string') {\n  try {\n    updated_conversation_context = JSON.parse(updated_conversation_context);\n  } catch (e) {\n    console.log('⚠️ Failed to parse conversation_context in finalizer, using empty object');\n    updated_conversation_context = {};\n  }\n}\n// Add fallback response for no course matches\nif (updated_conversation_context.course_matches?.length === 0 && updated_conversation_context.should_search_course) {\n  $json.response_message = \"Lo siento, no encontré cursos que coincidan con '\" + updated_conversation_context.course_query + \"'. ¿Puedes dar más detalles o probar otro nombre?\";\n  console.log('✅ Applied fallback response for no course matches');\n}\n// Set response timestamp if this response will be sent\nif (set_response_timestamp && !skip_sending && response_message) {\n  updated_conversation_context.last_response_at = new Date().toISOString();\n  console.log('✅ Set response timestamp:', updated_conversation_context.last_response_at);\n}\n// Validate final output\nconst validation_errors = [];\nif (!phone_e164) {\n  validation_errors.push('Missing phone_e164 for WhatsApp sending');\n  console.log('❌ CRITICAL: No phone number found in any source');\n  console.log('Available data keys:', Object.keys($json));\n}\nif (!response_message && !skip_sending) {\n  validation_errors.push('No response_message generated and not marked to skip');\n}\nif (!response_type) {\n  validation_errors.push('No response_type set');\n}\n// Handle validation errors - CRITICAL FIX for phone number\nif (validation_errors.length > 0) {\n  console.log('❌ Validation errors in finalizer:', validation_errors);\n \n  // If we don't have a phone number, this is a critical error - stop execution\n  if (!phone_e164) {\n    return {\n      json: {\n        ...$json,\n        skip_sending: true, // 🔧 CRITICAL: Skip sending if no phone number\n        response_message: null,\n        response_type: 'no_phone_error',\n        should_send_buttons: false,\n        buttons: [],\n        validation_errors,\n        error_details: 'No phone number available - cannot send WhatsApp message'\n      }\n    };\n  }\n \n  // Generate error response if we don't have a valid response but do have phone\n  if (!response_message && !skip_sending) {\n    return {\n      json: {\n        ...$json,\n        to: phone_e164,\n        conversation_context: updated_conversation_context,\n        response_message: 'Error interno. Intenta de nuevo.',\n        response_type: 'internal_error',\n        should_send_buttons: false,\n        buttons: [],\n        set_response_timestamp: true,\n        validation_errors,\n        error_details: 'Response validation failed in finalizer'\n      }\n    };\n  }\n}\n// Prepare final output\nconst final_output = {\n  ...$json,\n  to: phone_e164, // 🔧 FIXED: Always set 'to' parameter for WhatsApp\n  phone_e164: phone_e164, // Also keep this for consistency\n  conversation_context: updated_conversation_context,\n  response_message: response_message || null,\n  response_type: response_type || 'unknown',\n  should_send_buttons: $json.should_send_buttons || false,\n  buttons: $json.buttons || [],\n  skip_sending: skip_sending || false\n};\n// Clean up internal processing fields that shouldn't go downstream\ndelete final_output.response_data;\ndelete final_output.processing_path;\ndelete final_output.validation_issues;\ndelete final_output.is_priority_response;\ndelete final_output.should_continue_to_flow;\ndelete final_output.should_continue_to_next_flow;\ndelete final_output.is_course_info_response;\ndelete final_output.is_registration_response;\ndelete final_output.is_support_assistance_response;\ndelete final_output.is_fallback_response;\nconsole.log('=== RESPONSE FINALIZER OUTPUT ===');\nconsole.log('Final response type:', final_output.response_type);\nconsole.log('Final message length:', final_output.response_message?.length || 0);\nconsole.log('Skip sending:', final_output.skip_sending);\nconsole.log('To phone:', final_output.to);\nconsole.log('Has conversation context:', !!final_output.conversation_context);\n// 🔧 FINAL SAFETY CHECK\nif (!final_output.to && !final_output.skip_sending) {\n  console.log('🚨 FINAL SAFETY CHECK FAILED - No phone number for sending');\n  final_output.skip_sending = true;\n  final_output.response_message = null;\n  final_output.error_details = 'Final safety check: No phone number available';\n}\ntry {\n  return {\n    json: final_output\n  };\n} catch (error) {\n  console.log('❌ Error in response finalizer:', error.message);\n  return {\n    json: {\n      ...$json,\n      to: phone_e164 || 'unknown',\n      conversation_context: updated_conversation_context,\n      response_message: 'Error interno. Intenta de nuevo.',\n      response_type: 'finalizer_error',\n      should_send_buttons: false,\n      buttons: [],\n      skip_sending: !phone_e164, // Skip if no phone\n      error_details: error.message\n    }\n  };\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2464,
        160
      ],
      "id": "12325336-38e3-44f7-8154-a9f074616474",
      "name": "Response Finalizer"
    },
    {
      "parameters": {
        "jsCode": "// 🔧 Complete Response Input Processor - FIXED RESET AND MENU ROUTING\n// Purpose: Properly handle reset state and ensure correct flow routing\n\nconst content             = ($json.content || '').toLowerCase();\nconst step                = $json.conversation_step;\nlet conversation_context  = $json.conversation_context || {};\nconst course_matches      = $json.course_matches || [];\nconst unscheduled_courses = conversation_context.unscheduled_courses || [];\nconst selected_course     = $json.selected_course || conversation_context.selected_course || null;\nconst has_multiple        = $json.has_multiple || false;\nconst has_unscheduled     = conversation_context.has_unscheduled || false;\n\n// Reset handling flags\nconst should_reset_conversation = $json.should_reset_conversation;\nconst pending_reset = $json.pending_reset;\nconst post_send_reset_triggered = $json.post_send_reset_triggered;\nconst reset_reason = $json.reset_reason;\n\nfunction isGreetingMessage(content) {\n  const greetingPatterns = /^(hola|buenos días|buenas tardes|buenas noches|buen día)$/i;\n  return greetingPatterns.test(content.toLowerCase().trim());\n}\n\nconsole.log('=== RESPONSE INPUT PROCESSOR WITH RESET FUNCTIONALITY ===');\nconsole.log('Content:', content);\nconsole.log('Step:', step);\nconsole.log('Should reset conversation:', should_reset_conversation);\nconsole.log('Pending reset:', pending_reset);\nconsole.log('Reset reason:', reset_reason);\nconsole.log('Is first interaction:', $json.is_first_interaction);\n\n// 🔧 CRITICAL FIX: Handle reset scenarios first\nif (should_reset_conversation || pending_reset || post_send_reset_triggered) {\n  console.log('🔄 RESET SCENARIO DETECTED - Handling fresh start');\n  \n  // Clear conversation state for fresh start\n  conversation_context = {\n    ...conversation_context,\n    // Clear conversation flow state\n    end_conversation: false,\n    handoff: false,\n    conversation_ended_at: null,\n    // Keep essential data for continuity\n    phone_e164: $json.phone_e164,\n    last_user_message_time: $json.timestamp,\n    reset_from_previous: true,\n    reset_reason: reset_reason || 'conversation_reset',\n    reset_timestamp: $json.timestamp,\n    // Initialize fresh conversation\n    conversation_started: true,\n    first_message_content: $json.originalContent || $json.content,\n    first_message_at: $json.timestamp\n  };\n  \n  // If it's a greeting, respond with initial welcome\n  if (isGreetingMessage($json.originalContent || $json.content)) {\n    console.log('✅ RESET + GREETING - Sending initial welcome');\n    \n    return {\n      json: {\n        ...$json,\n        processing_path: 'initial_welcome',\n        response_data: {\n          step: null,\n          content: content,\n          conversation_context: conversation_context,\n          course_matches: [],\n          unscheduled_courses: [],\n          selected_course: null,\n          has_multiple: false,\n          has_unscheduled: false\n        },\n        should_continue_to_flow: false,\n        conversation_context: conversation_context,\n        conversation_step: null,\n        is_first_interaction: true,\n        skip_sending: false,\n        new_record: true\n      }\n    };\n  }\n}\n\n// 🔧 HANDLE FIRST INTERACTION (including post-reset)\nif (!step || $json.is_first_interaction || should_reset_conversation) {\n  console.log('🎯 First interaction or reset detected');\n  \n  // Check if it's a greeting\n  if (isGreetingMessage($json.originalContent || $json.content)) {\n    console.log('✅ Initial greeting detected');\n    \n    return {\n      json: {\n        ...$json,\n        processing_path: 'initial_welcome',\n        response_data: {\n          step: null,\n          content: content,\n          conversation_context: conversation_context,\n          course_matches: [],\n          unscheduled_courses: [],\n          selected_course: null,\n          has_multiple: false,\n          has_unscheduled: false\n        },\n        should_continue_to_flow: false,\n        skip_sending: false\n      }\n    };\n  }\n  \n  // 🔧 FIXED: Handle direct menu options with correct processing_path names\n  if (/^[1-4]$/.test(content)) {\n    console.log('✅ Direct menu selection detected:', content);\n    \n    // 🔧 CRITICAL FIX: Use correct processing_path names that match the handlers\n    let processing_path = 'general_conversation';\n    if (content === '1') {\n      processing_path = 'course_info_flow';  // Changed from 'info_curso_flow'\n    } else if (content === '2') {\n      processing_path = 'registration_flow';\n    } else if (content === '3') {\n      processing_path = 'assistance_flow';\n    } else if (content === '4') {\n      processing_path = 'support_flow';\n    }\n    \n    console.log('🔧 FIXED: Using processing_path:', processing_path);\n    \n    return {\n      json: {\n        ...$json,\n        processing_path: processing_path,\n        response_data: {\n          step: step, // Use the step set by Menu & Input Processor\n          content: content,\n          conversation_context: conversation_context,\n          course_matches: [],\n          unscheduled_courses: [],\n          selected_course: null,\n          has_multiple: false,\n          has_unscheduled: false\n        },\n        should_continue_to_flow: true,\n        skip_sending: false\n      }\n    };\n  }\n}\n\n// 🔧 HANDLE EXISTING CONVERSATION STEPS\n\n// Info Curso Flow - 🔧 FIXED: Use correct processing_path\nif (step === 'info_curso_ask_name') {\n  console.log('🎯 Course info: asking for course name');\n  return {\n    json: {\n      ...$json,\n      processing_path: 'course_info_flow',  // Changed from 'info_curso_flow'\n      response_data: {\n        step: step,\n        content: content,\n        conversation_context: conversation_context,\n        course_matches: course_matches,\n        unscheduled_courses: unscheduled_courses,\n        selected_course: selected_course,\n        has_multiple: has_multiple,\n        has_unscheduled: has_unscheduled\n      },\n      should_continue_to_flow: true\n    }\n  };\n}\n\nif (step === 'info_curso_confirm') {\n  console.log('🎯 Course info: confirming course selection');\n  return {\n    json: {\n      ...$json,\n      processing_path: 'course_info_flow',  // Changed from 'info_curso_flow'\n      response_data: {\n        step: step,\n        content: content,\n        conversation_context: conversation_context,\n        course_matches: course_matches,\n        unscheduled_courses: unscheduled_courses,\n        selected_course: selected_course,\n        has_multiple: has_multiple,\n        has_unscheduled: has_unscheduled\n      },\n      should_continue_to_flow: true\n    }\n  };\n}\n\nif (step === 'info_curso_show_info') {\n  console.log('🎯 Course info: showing course information');\n  return {\n    json: {\n      ...$json,\n      processing_path: 'course_info_flow',  // Changed from 'info_curso_flow'\n      response_data: {\n        step: step,\n        content: content,\n        conversation_context: conversation_context,\n        course_matches: course_matches,\n        unscheduled_courses: unscheduled_courses,\n        selected_course: selected_course,\n        has_multiple: has_multiple,\n        has_unscheduled: has_unscheduled\n      },\n      should_continue_to_flow: true\n    }\n  };\n}\n\nif (step === 'info_curso_show_unscheduled') {\n  console.log('🎯 Course info: showing unscheduled courses');\n  return {\n    json: {\n      ...$json,\n      processing_path: 'course_info_flow',  // Changed from 'info_curso_flow'\n      response_data: {\n        step: step,\n        content: content,\n        conversation_context: conversation_context,\n        course_matches: course_matches,\n        unscheduled_courses: unscheduled_courses,\n        selected_course: selected_course,\n        has_multiple: has_multiple,\n        has_unscheduled: has_unscheduled\n      },\n      should_continue_to_flow: true\n    }\n  };\n}\n\n// More Info Flow\nif (step && step.startsWith('more_info_')) {\n  console.log('🎯 More info flow:', step);\n  return {\n    json: {\n      ...$json,\n      processing_path: 'course_info_flow',  // Changed from 'more_info_flow'\n      response_data: {\n        step: step,\n        content: content,\n        conversation_context: conversation_context,\n        course_matches: course_matches,\n        unscheduled_courses: unscheduled_courses,\n        selected_course: selected_course,\n        has_multiple: has_multiple,\n        has_unscheduled: has_unscheduled\n      },\n      should_continue_to_flow: true\n    }\n  };\n}\n\n// Registration Flow\nif (step && step.startsWith('inscripcion_')) {\n  console.log('🎯 Registration flow:', step);\n  return {\n    json: {\n      ...$json,\n      processing_path: 'registration_flow',\n      response_data: {\n        step: step,\n        content: content,\n        conversation_context: conversation_context,\n        course_matches: course_matches,\n        unscheduled_courses: unscheduled_courses,\n        selected_course: selected_course,\n        has_multiple: has_multiple,\n        has_unscheduled: has_unscheduled\n      },\n      should_continue_to_flow: true\n    }\n  };\n}\n\n// Assistance Flow\nif (step && step.startsWith('asistencia_')) {\n  console.log('🎯 Assistance flow:', step);\n  return {\n    json: {\n      ...$json,\n      processing_path: 'support_assistance_flow',  // Changed from 'assistance_flow'\n      response_data: {\n        step: step,\n        content: content,\n        conversation_context: conversation_context,\n        course_matches: course_matches,\n        unscheduled_courses: unscheduled_courses,\n        selected_course: selected_course,\n        has_multiple: has_multiple,\n        has_unscheduled: has_unscheduled\n      },\n      should_continue_to_flow: true\n    }\n  };\n}\n\n// Support Flow\nif (step && step.startsWith('soporte_')) {\n  console.log('🎯 Support flow:', step);\n  return {\n    json: {\n      ...$json,\n      processing_path: 'support_assistance_flow',  // Changed from 'support_flow'\n      response_data: {\n        step: step,\n        content: content,\n        conversation_context: conversation_context,\n        course_matches: course_matches,\n        unscheduled_courses: unscheduled_courses,\n        selected_course: selected_course,\n        has_multiple: has_multiple,\n        has_unscheduled: has_unscheduled\n      },\n      should_continue_to_flow: true\n    }\n  };\n}\n\n// Confirmation Flow\nif (step === 'confirm_user_details') {\n  console.log('🎯 Confirmation flow');\n  return {\n    json: {\n      ...$json,\n      processing_path: 'confirmation_flow',\n      response_data: {\n        step: step,\n        content: content,\n        conversation_context: conversation_context,\n        course_matches: course_matches,\n        unscheduled_courses: unscheduled_courses,\n        selected_course: selected_course,\n        has_multiple: has_multiple,\n        has_unscheduled: has_unscheduled\n      },\n      should_continue_to_flow: false\n    }\n  };\n}\n\n// Unscheduled Course Details\nif (step && step.includes('unscheduled')) {\n  console.log('🎯 Unscheduled course flow:', step);\n  return {\n    json: {\n      ...$json,\n      processing_path: 'course_info_flow',  // Changed from 'unscheduled_flow'\n      response_data: {\n        step: step,\n        content: content,\n        conversation_context: conversation_context,\n        course_matches: course_matches,\n        unscheduled_courses: unscheduled_courses,\n        selected_course: selected_course,\n        has_multiple: has_multiple,\n        has_unscheduled: has_unscheduled\n      },\n      should_continue_to_flow: true\n    }\n  };\n}\n\n// Check for cooldown/ignore scenarios\nif (step && (step.includes('cooldown') || step.includes('ignore') || step.includes('duplicate'))) {\n  console.log('🤐 Cooldown/ignore scenario:', step);\n  return {\n    json: {\n      ...$json,\n      processing_path: 'cooldown_ignore',\n      response_data: {\n        step: step,\n        content: content,\n        conversation_context: conversation_context\n      },\n      should_continue_to_flow: false,\n      skip_sending: true\n    }\n  };\n}\n\n// Handoff scenarios\nif (conversation_context.handoff === true || step === 'handoff') {\n  console.log('🎯 Handoff scenario');\n  return {\n    json: {\n      ...$json,\n      processing_path: 'handoff',\n      response_data: {\n        step: step,\n        content: content,\n        conversation_context: conversation_context,\n        course_matches: course_matches,\n        unscheduled_courses: unscheduled_courses,\n        selected_course: selected_course,\n        has_multiple: has_multiple,\n        has_unscheduled: has_unscheduled\n      },\n      should_continue_to_flow: false\n    }\n  };\n}\n\n// End conversation scenarios\nif (conversation_context.end_conversation === true || step === 'end_conversation') {\n  console.log('🎯 End conversation scenario');\n  return {\n    json: {\n      ...$json,\n      processing_path: 'end_conversation',\n      response_data: {\n        step: step,\n        content: content,\n        conversation_context: conversation_context,\n        course_matches: course_matches,\n        unscheduled_courses: unscheduled_courses,\n        selected_course: selected_course,\n        has_multiple: has_multiple,\n        has_unscheduled: has_unscheduled\n      },\n      should_continue_to_flow: false\n    }\n  };\n}\n\n// Fallback - general conversation\nconsole.log('🎯 General conversation/fallback');\nreturn {\n  json: {\n    ...$json,\n    processing_path: 'general_conversation',\n    response_data: {\n      step: step,\n      content: content,\n      conversation_context: conversation_context,\n      course_matches: course_matches,\n      unscheduled_courses: unscheduled_courses,\n      selected_course: selected_course,\n      has_multiple: has_multiple,\n      has_unscheduled: has_unscheduled\n    },\n    should_continue_to_flow: true\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3584,
        160
      ],
      "id": "b4d01d33-aba0-4770-826e-45cdc30485c8",
      "name": "Response Input Processor"
    },
    {
      "parameters": {
        "updates": [
          "messages"
        ],
        "options": {}
      },
      "type": "n8n-nodes-base.whatsAppTrigger",
      "typeVersion": 1,
      "position": [
        -7616,
        240
      ],
      "id": "ebb54c4c-bf53-40ac-90bd-5ffef7e1e1f8",
      "name": "WhatsApp Trigger",
      "webhookId": "97dacf9a-9db2-4746-b0f2-ceff51c3e007",
      "credentials": {
        "whatsAppTriggerApi": {
          "id": "AAttBx3TgkAFXqyk",
          "name": "WhatsApp OAuth account 4"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Enhanced Fix node code\nconst json = $json;\n\n// 🔧 CRITICAL: Ensure phone_e164 exists through multiple fallbacks\nif (!json.phone_e164) {\n  json.phone_e164 = json.to || \n                   json.from || \n                   json.messages?.[0]?.from || \n                   json.contacts?.[0]?.wa_id ||\n                   json.response_data?.phone_e164;\n}\n\n// Ensure phone number exists for WhatsApp sending\nif (!json.to && json.phone_e164) {\n  json.to = json.phone_e164;\n}\n\n// Final safety check\nif (!json.phone_e164 || !json.to) {\n  console.log('❌ MISSING PHONE NUMBER:', {\n    phone_e164: json.phone_e164,\n    to: json.to,\n    available_keys: Object.keys(json)\n  });\n  json.skip_sending = true;\n  json.response_message = null;\n}\n\nreturn { json };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2240,
        240
      ],
      "id": "b0c5b83e-3d52-407e-8740-98989eeecdf9",
      "name": "Fix"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "ab55ddb6-2d6a-4932-9035-f237c250b8d1",
              "leftValue": "={{$json.phone_e164 && !$json.skip_sending}}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1120,
        160
      ],
      "id": "ebd05fec-df8b-4914-b823-c8465fea9e80",
      "name": "Gate persistence",
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "// 🔧 FIXED: Conversation Number Handler - Preserves ALL original data\n// Purpose: Add conversation_number while preserving all existing fields\n\nconst phone_e164 = $json.phone_e164;\nconst should_restart_conversation = $json.should_restart_conversation;\nconst is_first_interaction = $json.is_first_interaction;\n\n// Get the max conversation_number from Airtable query (if available)\nconst airtable_records = $json.records || [];\nconst max_conversation_number = airtable_records.length > 0 \n  ? (airtable_records[0].conversation_number || 0)\n  : 0;\n\nconsole.log('=== CONVERSATION NUMBER HANDLER ===');\nconsole.log('Phone:', phone_e164);\nconsole.log('Max conversation number from Airtable:', max_conversation_number);\nconsole.log('Available input keys:', Object.keys($json));\n\nconst needs_new_conversation_number = is_first_interaction || \n                                     !$json.conversation_context?.conversation_number;\n\nlet final_conversation_number;\n\nif (needs_new_conversation_number && phone_e164) {\n  final_conversation_number = max_conversation_number + 1;\n  console.log('✅ Setting new conversation number:', final_conversation_number);\n} else {\n  final_conversation_number = $json.conversation_context?.conversation_number || 1;\n  console.log('✅ Using existing conversation number:', final_conversation_number);\n}\n\n// 🔧 CRITICAL: Preserve ALL original data and just add conversation_number\nreturn {\n  json: {\n    ...$json,  // 🔧 PRESERVE ALL ORIGINAL DATA\n    conversation_number: final_conversation_number\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -672,
        96
      ],
      "id": "cab23a5a-c24f-48ca-a778-1e5f7f0daa67",
      "name": "Conversation Number Handler"
    },
    {
      "parameters": {
        "operation": "search",
        "base": {
          "__rl": true,
          "value": "appazwkbXe7mYFMCA",
          "mode": "list",
          "cachedResultName": "Elite",
          "cachedResultUrl": "https://airtable.com/appazwkbXe7mYFMCA"
        },
        "table": {
          "__rl": true,
          "value": "tblrYlGZCqWXEXUsz",
          "mode": "list",
          "cachedResultName": "Imported table",
          "cachedResultUrl": "https://airtable.com/appazwkbXe7mYFMCA/tblrYlGZCqWXEXUsz"
        },
        "filterByFormula": "=={phone_e164} = '{{$json.phone_e164}}'",
        "options": {},
        "sort": {
          "property": [
            {
              "field": "conversation_number",
              "direction": "desc"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2.1,
      "position": [
        -896,
        96
      ],
      "id": "e8ff5ef6-dfe4-45cf-bbbb-1e82e654605f",
      "name": "Search records",
      "alwaysOutputData": true,
      "credentials": {
        "airtableTokenApi": {
          "id": "glMRuBJOdd21lPaf",
          "name": "Airtable Personal Access Token account"
        }
      }
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -448,
        160
      ],
      "id": "a0c8602b-67a0-4c02-ace4-c81b89a4bb4b",
      "name": "Last Merge"
    },
    {
      "parameters": {
        "jsCode": "// 🔧 Post-Send Reset Handler\n// Purpose: Trigger conversation reset after sending handoff/end messages\n\nconst trigger_reset_after_send = $json.trigger_reset_after_send;\nconst response_type = $json.response_type;\nconst conversation_context = $json.conversation_context || {};\n\nconsole.log('=== POST-SEND RESET HANDLER DEBUG ===');\nconsole.log('Trigger reset after send:', trigger_reset_after_send);\nconsole.log('Response type:', response_type);\nconsole.log('Current context handoff:', conversation_context.handoff);\nconsole.log('Current context end_conversation:', conversation_context.end_conversation);\n\n// 🔧 Check if we should trigger a reset after this message was sent\nconst shouldTriggerReset = trigger_reset_after_send || \n                          response_type === 'handoff' || \n                          response_type === 'end_conversation' ||\n                          response_type === 'registration_final_thanks' ||\n                          conversation_context.handoff === true ||\n                          conversation_context.end_conversation === true;\n\nif (shouldTriggerReset) {\n  console.log('🔄 TRIGGERING POST-SEND RESET');\n  \n  // Determine reset reason\n  let reset_reason;\n  if (response_type === 'handoff' || conversation_context.handoff) {\n    reset_reason = 'handoff_completed';\n  } else if (response_type === 'end_conversation' || conversation_context.end_conversation) {\n    reset_reason = 'conversation_ended';\n  } else if (response_type === 'registration_final_thanks') {\n    reset_reason = 'conversation_ended';\n  } else {\n    reset_reason = 'post_send_trigger';\n  }\n  \n  // Get current conversation number for incrementing\n  const current_conversation_number = conversation_context.conversation_number || 1;\n  const new_conversation_number = current_conversation_number + 1;\n  \n  console.log('📊 Post-send reset details:', {\n    reason: reset_reason,\n    current_conv_num: current_conversation_number,\n    new_conv_num: new_conversation_number\n  });\n  \n  // Create completely fresh conversation context\n  const reset_conversation_context = {\n    // Essential tracking\n    conversation_number: new_conversation_number,\n    last_user_message_time: $json.timestamp,\n    \n    // 🔧 CRITICAL: Reset ALL conversation state flags\n    intro_sent: false,                    // 🔑 Allow new greetings\n    handoff: false,\n    end_conversation: false,\n    conversation_ended_at: null,\n    last_response_at: null,\n    last_greeting_time: null,             // 🔑 Clear greeting timestamp\n    \n    // Clear all course data\n    course_matches: [],\n    unscheduled_courses: [],\n    selected_course: null,\n    has_multiple: false,\n    has_unscheduled: false,\n    should_search_course: false,\n    awaiting_selection: false,\n    \n    // Clear user data (will be re-collected if needed)\n    user_name: null,\n    user_phone: null,\n    participants_count: null,\n    company_name: null,\n    \n    // Clear temporary data\n    temp_parsed_name: null,\n    temp_parsed_phone: null,\n    temp_parsed_participants: null,\n    temp_past_course: null,\n    temp_support_request: null,\n    temp_assistance_request: null,\n    \n    // Clear branch and flow data\n    branch: null,\n    support_type: null,\n    advisor: null,\n    course_query: null,\n    course_details: null,\n    past_course: null,\n    assistance_request: null,\n    support_request: null,\n    other_query: null,\n    \n    // Clear conversion tracking\n    conversion_blockers: [],\n    preferred_contact: 'whatsapp',\n    payment_status: 'unpaid',\n    course_type: null,\n    \n    // Reset confirmation states\n    return_to_step: null,\n    continue_to_step: null,\n    \n    // Mark as reset for tracking\n    reset_from_previous: true,\n    reset_reason: reset_reason,\n    reset_timestamp: $json.timestamp,\n    pending_reset: true,                  // 🔑 Mark as pending reset\n    previous_conversation_number: current_conversation_number,\n    \n    // Track the completion\n    reset_triggered_post_send: true\n  };\n  \n  console.log('✅ Created fresh conversation context for post-send reset');\n  \n  // Update conversation history\n  const currentHistory = $json.conversation_history || '';\n  const resetHistoryEntry = `\\n[${new Date().toLocaleString('es-CO')}] Sistema: Conversación reiniciada automáticamente - ${reset_reason}`;\n  const updatedHistory = currentHistory + resetHistoryEntry;\n  \n  // Create new Airtable record for the reset conversation\n  return {\n    json: {\n      ...$json,\n      conversation_context: reset_conversation_context,\n      conversation_step: null, // Clear conversation step\n      should_create_new_record: true,\n      conversation_number: new_conversation_number,\n      reset_reason: reset_reason,\n      conversation_history: updatedHistory,\n      // 🔧 CRITICAL: Ensure reset flags are set\n      should_reset_conversation: true,     // 🔑 Signal reset to next handler\n      pending_reset: true,                 // 🔑 Signal pending reset\n      // Flag for Airtable to create new record\n      post_send_reset_triggered: true,\n      // Ensure no blocking flags\n      should_skip: false,\n      skip_sending: false\n    }\n  };\n} else {\n  console.log('⭐ No post-send reset needed - passing through unchanged');\n  \n  // No reset needed, pass through unchanged\n  return {\n    json: {\n      ...$json,\n      post_send_reset_triggered: false\n    }\n  };\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1568,
        240
      ],
      "id": "8f5efddd-69dc-4861-8aab-d74daef2e167",
      "name": "Post-Send Reset Handler"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "0c523f27-5534-4c3f-ade4-7fde47eadd84",
              "leftValue": "={{$json.should_create_new_record}}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            },
            {
              "id": "a7d2ede8-7521-44ee-81c8-f196bba0a8b6",
              "leftValue": "={{$json.conversation_context.pending_reset}}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        0,
        160
      ],
      "id": "cabff4ec-d118-4a24-a2d2-2b48706b5378",
      "name": "If1"
    },
    {
      "parameters": {
        "operation": "create",
        "base": {
          "__rl": true,
          "value": "appazwkbXe7mYFMCA",
          "mode": "list"
        },
        "table": {
          "__rl": true,
          "value": "tblrYlGZCqWXEXUsz",
          "mode": "list"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "name": "={{ $json.userName || 'Usuario' }}",
            "phone_e164": "={{ $json.phone_e164 }}",
            "intent": "={{ $json.intent || 'consulta_general' }}",
            "lead_score": "={{ $json.elite_score || 20 }}",
            "priority": "={{ $json.elite_priority || 'cold' }}",
            "status": "={{ $json.is_returning ? 'Engaged' : 'New' }}",
            "last_message": "={{ $json.content }}",
            "last_message_at": "={{ $json.timestamp }}",
            "course_name": "={{ $json.selected_course.nombre || $json.conversation_context.selected_course.nombre || null }}",
            "conversation_step": "={{$json.conversation_step}}",
            "response_type": "={{$json.response_type}}",
            "wants_advisor": "={{$json.wants_advisor ? 'true' : 'false'}}",
            "conversation_context": "={{JSON.stringify($json.conversation_context)}}",
            "codigo": "={{ $json.selected_course.codigo || $json.conversation_context.selected_course.codigo || null }}",
            "participants_count": "={{ $json.conversation_context.participants_count || $json.participants_count || null }}",
            "company_name": "={{ $json.company_name || $json.conversation_context.company_name || null }}",
            "course_type": "={{ $json.course_type || ($json.has_course_info ? 'standard' : 'custom') }}",
            "payment_status": "={{ $json.payment_status || $json.conversation_context.payment_status || 'unpaid' }}",
            "preferred_contact": "={{ $json.preferred_contact || $json.conversation_context.preferred_contact || 'whatsapp' }}",
            "conversion_blockers": "={{ $json.conversion_blockers || $json.conversation_context.conversion_blockers || [] }}",
            "last_handoff": "={{ $json.last_handoff || $json.conversation_context.contact_type || 'none' }}",
            "branch": "={{ $json.conversation_context.branch || null }}",
            "query": "={{ $json.conversation_context.course_query || $json.conversation_context.other_query || $json.conversation_context.support_request || $json.conversation_context.course_details || $json.conversation_context.assistance_request || $json.parsed_details || null }}",
            "handoff": "={{ $json.conversation_context.handoff ? true : false }}",
            "advisor": "={{ $json.conversation_context.advisor || null }}",
            "assistance_request": "={{ $json.conversation_context.assistance_request || null }}",
            "user_provided_phone": "={{ $json.conversation_context.support_type ? null : ($json.conversation_context.user_phone || null) }}",
            "past_course": "={{ $json.conversation_context.past_course || null }}",
            "user_provided_name": "={{ $json.conversation_context.user_name || null }}",
            "course_date": "={{ $json.selected_course.fecha || $json.conversation_context.selected_course.fecha || null }}",
            "first_message": "={{ $json.conversation_context.first_message_content || null }}",
            "conversation_number": "={{ $json.conversation_number || 1 }}",
            "conversation_history": "={{ $json.conversation_history || '' }}",
            "reset_from_previous": "={{$json.conversation_context.reset_from_previous || false}}",
            "reset_reason": "={{$json.reset_reason || $json.conversation_context.reset_reason || null}}",
            "reset_timestamp": "={{$json.conversation_context.reset_timestamp || null}}",
            "previous_conversation_number": "={{$json.conversation_context.previous_conversation_number || null}}"
          },
          "matchingColumns": [
            "phone_e164"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "string",
              "readOnly": true,
              "removed": false
            },
            {
              "id": "name",
              "displayName": "name",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "user_provided_name",
              "displayName": "user_provided_name",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "participants_count",
              "displayName": "participants_count",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "phone_e164",
              "displayName": "phone_e164",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "codigo",
              "displayName": "codigo",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "course_name",
              "displayName": "course_name",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "course_date",
              "displayName": "course_date",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "branch",
              "displayName": "branch",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "assistance_request",
              "displayName": "assistance_request",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "wants_advisor",
              "displayName": "wants_advisor",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "options",
              "options": [
                {
                  "name": "true",
                  "value": "true"
                },
                {
                  "name": "false",
                  "value": "false"
                }
              ],
              "readOnly": false,
              "removed": false
            },
            {
              "id": "query",
              "displayName": "query",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "last_message_at",
              "displayName": "last_message_at",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "dateTime",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "conversation_step",
              "displayName": "conversation_step",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "advisor",
              "displayName": "advisor",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "past_course",
              "displayName": "past_course",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "user_provided_phone",
              "displayName": "user_provided_phone",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "first_message",
              "displayName": "first_message",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "conversation_number",
              "displayName": "conversation_number",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "recordId",
              "displayName": "recordId",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "conversation_history",
              "displayName": "conversation_history",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "reset_from_previous",
              "displayName": "reset_from_previous",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "boolean",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "reset_reason",
              "displayName": "reset_reason",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "reset_timestamp",
              "displayName": "reset_timestamp",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "previous_conversation_number",
              "displayName": "previous_conversation_number",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "intent",
              "displayName": "intent",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "lead_score",
              "displayName": "lead_score",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "priority",
              "displayName": "priority",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "options",
              "options": [
                {
                  "name": "New",
                  "value": "New"
                },
                {
                  "name": "Awaiting reply",
                  "value": "Awaiting reply"
                },
                {
                  "name": "Engaged",
                  "value": "Engaged"
                },
                {
                  "name": "Ready to pay",
                  "value": "Ready to pay"
                },
                {
                  "name": "Converted",
                  "value": "Converted"
                },
                {
                  "name": "No response",
                  "value": "No response"
                },
                {
                  "name": "Collecting",
                  "value": "Collecting"
                }
              ],
              "readOnly": false,
              "removed": false
            },
            {
              "id": "last_message",
              "displayName": "last_message",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "raw",
              "displayName": "raw",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "button_response",
              "displayName": "button_response",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "options",
              "options": [
                {
                  "name": "💬 Mensaje",
                  "value": "💬 Mensaje"
                },
                {
                  "name": "📞 Llamada",
                  "value": "📞 Llamada"
                }
              ],
              "readOnly": false,
              "removed": false
            },
            {
              "id": "first_message_at",
              "displayName": "first_message_at",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "createdTime",
              "displayName": "createdTime",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "keywords_found",
              "displayName": "keywords_found",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "response_type",
              "displayName": "response_type",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "conversation_context",
              "displayName": "conversation_context",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "company_name",
              "displayName": "company_name",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "course_type",
              "displayName": "course_type",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "options",
              "options": [
                {
                  "name": "standard",
                  "value": "standard"
                },
                {
                  "name": "custom",
                  "value": "custom"
                }
              ],
              "readOnly": false,
              "removed": false
            },
            {
              "id": "payment_status",
              "displayName": "payment_status",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "options",
              "options": [
                {
                  "name": "unpaid",
                  "value": "unpaid"
                },
                {
                  "name": "pending",
                  "value": "pending"
                },
                {
                  "name": "paid",
                  "value": "paid"
                }
              ],
              "readOnly": false,
              "removed": false
            },
            {
              "id": "preferred_contact",
              "displayName": "preferred_contact",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "options",
              "options": [
                {
                  "name": "whatsapp",
                  "value": "whatsapp"
                },
                {
                  "name": "call",
                  "value": "call"
                },
                {
                  "name": "email",
                  "value": "email"
                }
              ],
              "readOnly": false,
              "removed": false
            },
            {
              "id": "conversion_blockers",
              "displayName": "conversion_blockers",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "array",
              "options": [
                {
                  "name": "price",
                  "value": "price"
                },
                {
                  "name": "timing",
                  "value": "timing"
                },
                {
                  "name": "need_approval",
                  "value": "need_approval"
                },
                {
                  "name": "not_decided",
                  "value": "not_decided"
                },
                {
                  "name": "other",
                  "value": "other"
                }
              ],
              "readOnly": false,
              "removed": false
            },
            {
              "id": "last_handoff",
              "displayName": "last_handoff",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "options",
              "options": [
                {
                  "name": "sales_rep",
                  "value": "sales_rep"
                },
                {
                  "name": "director",
                  "value": "director"
                },
                {
                  "name": "none",
                  "value": "none"
                }
              ],
              "readOnly": false,
              "removed": false
            },
            {
              "id": "handoff",
              "displayName": "handoff",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "boolean",
              "readOnly": false,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {
          "typecast": true
        }
      },
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2.1,
      "position": [
        224,
        64
      ],
      "id": "fac04b72-6500-429a-b3ff-e4f770671cb0",
      "name": "Airtable Manager - Create",
      "credentials": {
        "airtableTokenApi": {
          "id": "glMRuBJOdd21lPaf",
          "name": "Airtable Personal Access Token account"
        }
      }
    },
    {
      "parameters": {
        "operation": "upsert",
        "base": {
          "__rl": true,
          "value": "appazwkbXe7mYFMCA",
          "mode": "list"
        },
        "table": {
          "__rl": true,
          "value": "tblrYlGZCqWXEXUsz",
          "mode": "list"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "name": "={{ $json.userName || 'Usuario' }}",
            "phone_e164": "={{ $json.phone_e164 }}",
            "intent": "={{ $json.intent || 'consulta_general' }}",
            "lead_score": "={{ $json.elite_score || 20 }}",
            "priority": "={{ $json.elite_priority || 'cold' }}",
            "status": "={{ $json.is_returning ? 'Engaged' : 'New' }}",
            "last_message": "={{ $json.content }}",
            "last_message_at": "={{ $json.timestamp }}",
            "course_name": "={{ $json.selected_course.nombre || $json.conversation_context.selected_course.nombre || null }}",
            "conversation_step": "={{$json.conversation_step}}",
            "response_type": "={{$json.response_type}}",
            "wants_advisor": "={{$json.wants_advisor ? 'true' : 'false'}}",
            "conversation_context": "={{JSON.stringify($json.conversation_context)}}",
            "codigo": "={{ $json.selected_course.codigo || $json.conversation_context.selected_course.codigo || null }}",
            "participants_count": "={{ $json.conversation_context.participants_count || $json.participants_count || null }}",
            "company_name": "={{ $json.company_name || $json.conversation_context.company_name || null }}",
            "course_type": "={{ $json.course_type || ($json.has_course_info ? 'standard' : 'custom') }}",
            "payment_status": "={{ $json.payment_status || $json.conversation_context.payment_status || 'unpaid' }}",
            "preferred_contact": "={{ $json.preferred_contact || $json.conversation_context.preferred_contact || 'whatsapp' }}",
            "conversion_blockers": "={{ $json.conversion_blockers || $json.conversation_context.conversion_blockers || [] }}",
            "last_handoff": "={{ $json.last_handoff || $json.conversation_context.contact_type || 'none' }}",
            "branch": "={{ $json.conversation_context.branch || null }}",
            "query": "={{ $json.conversation_context.course_query || $json.conversation_context.other_query || $json.conversation_context.support_request || $json.conversation_context.course_details || $json.conversation_context.assistance_request || $json.parsed_details || null }}",
            "handoff": "={{ $json.conversation_context.handoff ? true : false }}",
            "advisor": "={{ $json.conversation_context.advisor || null }}",
            "assistance_request": "={{ $json.conversation_context.assistance_request || null }}",
            "user_provided_phone": "={{ $json.conversation_context.support_type ? null : ($json.conversation_context.user_phone || null) }}",
            "past_course": "={{ $json.conversation_context.past_course || null }}",
            "user_provided_name": "={{ $json.conversation_context.user_name || null }}",
            "course_date": "={{ $json.selected_course.fecha || $json.conversation_context.selected_course.fecha || null }}",
            "first_message": "={{ $json.conversation_context.first_message_content || null }}",
            "conversation_number": "={{ $json.conversation_number || 1 }}",
            "conversation_history": "={{ $json.conversation_history || '' }}",
            "reset_from_previous": "={{$json.conversation_context.reset_from_previous || false}}",
            "reset_reason": "={{$json.reset_reason || $json.conversation_context.reset_reason || null}}",
            "reset_timestamp": "={{$json.conversation_context.reset_timestamp || null}}",
            "previous_conversation_number": "={{$json.conversation_context.previous_conversation_number || null}}"
          },
          "matchingColumns": [
            "phone_e164"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "string",
              "readOnly": true,
              "removed": false
            },
            {
              "id": "name",
              "displayName": "name",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "user_provided_name",
              "displayName": "user_provided_name",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "participants_count",
              "displayName": "participants_count",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "phone_e164",
              "displayName": "phone_e164",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "codigo",
              "displayName": "codigo",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "course_name",
              "displayName": "course_name",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "course_date",
              "displayName": "course_date",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "branch",
              "displayName": "branch",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "assistance_request",
              "displayName": "assistance_request",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "wants_advisor",
              "displayName": "wants_advisor",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "options",
              "options": [
                {
                  "name": "true",
                  "value": "true"
                },
                {
                  "name": "false",
                  "value": "false"
                }
              ],
              "readOnly": false,
              "removed": false
            },
            {
              "id": "query",
              "displayName": "query",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "last_message_at",
              "displayName": "last_message_at",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "dateTime",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "conversation_step",
              "displayName": "conversation_step",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "advisor",
              "displayName": "advisor",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "past_course",
              "displayName": "past_course",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "user_provided_phone",
              "displayName": "user_provided_phone",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "first_message",
              "displayName": "first_message",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "conversation_number",
              "displayName": "conversation_number",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "recordId",
              "displayName": "recordId",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "conversation_history",
              "displayName": "conversation_history",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "reset_from_previous",
              "displayName": "reset_from_previous",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "boolean",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "reset_reason",
              "displayName": "reset_reason",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "reset_timestamp",
              "displayName": "reset_timestamp",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "previous_conversation_number",
              "displayName": "previous_conversation_number",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "intent",
              "displayName": "intent",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "lead_score",
              "displayName": "lead_score",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "priority",
              "displayName": "priority",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "options",
              "options": [
                {
                  "name": "New",
                  "value": "New"
                },
                {
                  "name": "Awaiting reply",
                  "value": "Awaiting reply"
                },
                {
                  "name": "Engaged",
                  "value": "Engaged"
                },
                {
                  "name": "Ready to pay",
                  "value": "Ready to pay"
                },
                {
                  "name": "Converted",
                  "value": "Converted"
                },
                {
                  "name": "No response",
                  "value": "No response"
                },
                {
                  "name": "Collecting",
                  "value": "Collecting"
                }
              ],
              "readOnly": false,
              "removed": false
            },
            {
              "id": "last_message",
              "displayName": "last_message",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "raw",
              "displayName": "raw",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "button_response",
              "displayName": "button_response",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "options",
              "options": [
                {
                  "name": "💬 Mensaje",
                  "value": "💬 Mensaje"
                },
                {
                  "name": "📞 Llamada",
                  "value": "📞 Llamada"
                }
              ],
              "readOnly": false,
              "removed": false
            },
            {
              "id": "first_message_at",
              "displayName": "first_message_at",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "createdTime",
              "displayName": "createdTime",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "keywords_found",
              "displayName": "keywords_found",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "response_type",
              "displayName": "response_type",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "conversation_context",
              "displayName": "conversation_context",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "company_name",
              "displayName": "company_name",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "course_type",
              "displayName": "course_type",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "options",
              "options": [
                {
                  "name": "standard",
                  "value": "standard"
                },
                {
                  "name": "custom",
                  "value": "custom"
                }
              ],
              "readOnly": false,
              "removed": false
            },
            {
              "id": "payment_status",
              "displayName": "payment_status",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "options",
              "options": [
                {
                  "name": "unpaid",
                  "value": "unpaid"
                },
                {
                  "name": "pending",
                  "value": "pending"
                },
                {
                  "name": "paid",
                  "value": "paid"
                }
              ],
              "readOnly": false,
              "removed": false
            },
            {
              "id": "preferred_contact",
              "displayName": "preferred_contact",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "options",
              "options": [
                {
                  "name": "whatsapp",
                  "value": "whatsapp"
                },
                {
                  "name": "call",
                  "value": "call"
                },
                {
                  "name": "email",
                  "value": "email"
                }
              ],
              "readOnly": false,
              "removed": false
            },
            {
              "id": "conversion_blockers",
              "displayName": "conversion_blockers",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "array",
              "options": [
                {
                  "name": "price",
                  "value": "price"
                },
                {
                  "name": "timing",
                  "value": "timing"
                },
                {
                  "name": "need_approval",
                  "value": "need_approval"
                },
                {
                  "name": "not_decided",
                  "value": "not_decided"
                },
                {
                  "name": "other",
                  "value": "other"
                }
              ],
              "readOnly": false,
              "removed": false
            },
            {
              "id": "last_handoff",
              "displayName": "last_handoff",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "options",
              "options": [
                {
                  "name": "sales_rep",
                  "value": "sales_rep"
                },
                {
                  "name": "director",
                  "value": "director"
                },
                {
                  "name": "none",
                  "value": "none"
                }
              ],
              "readOnly": false,
              "removed": false
            },
            {
              "id": "handoff",
              "displayName": "handoff",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "boolean",
              "readOnly": false,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {
          "typecast": true
        }
      },
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2.1,
      "position": [
        224,
        256
      ],
      "id": "994b91e3-7226-459e-b99d-eededf7b3282",
      "name": "Airtable Manager - Upsert",
      "credentials": {
        "airtableTokenApi": {
          "id": "glMRuBJOdd21lPaf",
          "name": "Airtable Personal Access Token account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Enhanced Conversation History Builder\n// Includes message types and conversation context\n\nconst current_message = $json.originalContent || $json.content || '';\nconst response_message = $json.response_message || '';\nconst response_type = $json.response_type || '';\nconst conversation_step = $json.conversation_step || '';\nconst timestamp = new Date($json.timestamp || Date.now());\n\n// 🔧 CRITICAL FIX: Check if this is a reset scenario - start fresh history\nconst isResetScenario = $json.should_reset_conversation || \n                       $json.conversation_context?.reset_from_previous ||\n                       $json.post_send_reset_triggered ||\n                       $json.conversation_context?.pending_reset ||\n                       $json.new_record;\n\nlet existing_history = '';\n\nif (!isResetScenario) {\n  // Normal scenario: get existing conversation history\n  existing_history = $json.conversation_history || \n                    ($json.records && $json.records.length > 0 ? \n                     $json.records[0].conversation_history || '' : '');\n} else {\n  console.log('🔄 RESET DETECTED - Starting fresh conversation history');\n  console.log('Reset flags:', {\n    should_reset_conversation: $json.should_reset_conversation,\n    reset_from_previous: $json.conversation_context?.reset_from_previous,\n    post_send_reset_triggered: $json.post_send_reset_triggered,\n    pending_reset: $json.conversation_context?.pending_reset,\n    new_record: $json.new_record\n  });\n  existing_history = '';\n}\n\nconsole.log('=== ENHANCED CONVERSATION HISTORY BUILDER ===');\nconsole.log('Is reset scenario:', isResetScenario);\nconsole.log('Starting with existing history length:', existing_history.length);\n\n// Format timestamp\nconst formatted_time = timestamp.toLocaleString('es-CO', {\n  year: 'numeric',\n  month: '2-digit',\n  day: '2-digit', \n  hour: '2-digit',\n  minute: '2-digit',\n  hour12: false\n});\n\nlet new_entries = [];\n\n// Add user message with context\nif (current_message && current_message.trim() !== '') {\n  let user_entry = `[${formatted_time}] Usuario: ${current_message.trim()}`;\n  \n  // Add context if available\n  if (conversation_step) {\n    user_entry += ` (${conversation_step})`;\n  }\n  \n  new_entries.push(user_entry);\n}\n\n// Add bot response with type\nif (response_message && response_message.trim() !== '' && !$json.skip_sending) {\n  const response_time = new Date(Date.now() + 1000);\n  const formatted_response_time = response_time.toLocaleString('es-CO', {\n    year: 'numeric',\n    month: '2-digit',\n    day: '2-digit',\n    hour: '2-digit', \n    minute: '2-digit',\n    hour12: false\n  });\n  \n  let bot_entry = `[${formatted_response_time}] Bot: ${response_message.trim()}`;\n  \n  // Add response type if available\n  if (response_type && response_type !== 'unknown') {\n    bot_entry += ` [${response_type}]`;\n  }\n  \n  new_entries.push(bot_entry);\n}\n\n// Special handling for system events\nif ($json.should_restart_conversation || isResetScenario) {\n  new_entries.push(`[${formatted_time}] Sistema: Conversación reiniciada`);\n}\n\nif ($json.conversation_context && $json.conversation_context.handoff) {\n  new_entries.push(`[${formatted_time}] Sistema: Transferido a asesor humano`);\n}\n\nif ($json.conversation_context && $json.conversation_context.end_conversation) {\n  new_entries.push(`[${formatted_time}] Sistema: Conversación finalizada`);\n}\n\n// Combine histories\nlet updated_history = existing_history;\nif (new_entries.length > 0) {\n  if (updated_history && updated_history.trim() !== '') {\n    updated_history += '\\n' + new_entries.join('\\n');\n  } else {\n    updated_history = new_entries.join('\\n');\n  }\n}\n\n// Limit length (keep last 150 lines for enhanced version)\nconst history_lines = updated_history.split('\\n');\nif (history_lines.length > 150) {\n  updated_history = history_lines.slice(-150).join('\\n');\n  console.log('⚠️ Trimmed conversation history to last 150 lines');\n}\n\nconsole.log('Enhanced history updated with', new_entries.length, 'new entries');\nconsole.log('Final history length:', updated_history.length);\n\nreturn {\n  json: {\n    ...$json,\n    conversation_history: updated_history,\n    conversation_history_metadata: {\n      last_updated: new Date().toISOString(),\n      total_lines: updated_history.split('\\n').length,\n      entries_added: new_entries.length,\n      is_reset_scenario: isResetScenario\n    }\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -224,
        160
      ],
      "id": "c14493d0-1009-4ec4-adb1-b52f8b4ac2d3",
      "name": "Enhanced Conversation History Builder"
    }
  ],
  "pinData": {},
  "connections": {
    "Course Search (Airtable)": {
      "main": [
        [
          {
            "node": "Collect Records",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Course Processor": {
      "main": [
        [
          {
            "node": "Context Enricher",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Course Search (Airtable)",
            "type": "main",
            "index": 0
          },
          {
            "node": "Pass Through Course",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Fetch Lead Data": {
      "main": [
        [
          {
            "node": "Combine Branches",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Message Router": {
      "main": [
        [
          {
            "node": "Fetch Lead Data",
            "type": "main",
            "index": 0
          },
          {
            "node": "Pass Through Original",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Context Enricher": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Response Input Processor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Pass Through Original": {
      "main": [
        [
          {
            "node": "Combine Branches",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine Branches": {
      "main": [
        [
          {
            "node": "Merge Previous State",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Pass Through Course": {
      "main": [
        [
          {
            "node": "Merge Course Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Collect Records": {
      "main": [
        [
          {
            "node": "Merge Course Data",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge Course Data": {
      "main": [
        [
          {
            "node": "Course Processor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "WhatsApp Sender": {
      "main": [
        [
          {
            "node": "Post-Send Reset Handler",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "Gate persistence",
            "type": "main",
            "index": 0
          },
          {
            "node": "Search records",
            "type": "main",
            "index": 0
          },
          {
            "node": "Last Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Skip Cooldown Messages": {
      "main": [
        [
          {
            "node": "WhatsApp Sender",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Conversation Step Router (State Machine)": {
      "main": [
        [
          {
            "node": "Data Preservation & Context Updater",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Menu & Input Processor": {
      "main": [
        [
          {
            "node": "Conversation Step Router (State Machine)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cooldown & Anti-Duplication Handler": {
      "main": [
        [
          {
            "node": "Menu & Input Processor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Context Loader & Sanitizer": {
      "main": [
        [
          {
            "node": "Cooldown & Anti-Duplication Handler",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Previous State": {
      "main": [
        [
          {
            "node": "Context Loader & Sanitizer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Data Preservation & Context Updater": {
      "main": [
        [
          {
            "node": "AI Processor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Processor": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Priority Response Handler": {
      "main": [
        [
          {
            "node": "Course Information Flow Handler",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Course Information Flow Handler": {
      "main": [
        [
          {
            "node": "Registration Flow Handler",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Registration Flow Handler": {
      "main": [
        [
          {
            "node": "Support & Assistance Flow Handler",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Support & Assistance Flow Handler": {
      "main": [
        [
          {
            "node": "Response Finalizer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Response Finalizer": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Fix",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Response Input Processor": {
      "main": [
        [
          {
            "node": "Priority Response Handler",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "WhatsApp Trigger": {
      "main": [
        [
          {
            "node": "Message Router",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fix": {
      "main": [
        [
          {
            "node": "Skip Cooldown Messages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gate persistence": {
      "main": [
        [
          {
            "node": "Search records",
            "type": "main",
            "index": 0
          },
          {
            "node": "Last Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Conversation Number Handler": {
      "main": [
        [
          {
            "node": "Last Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search records": {
      "main": [
        [
          {
            "node": "Conversation Number Handler",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Last Merge": {
      "main": [
        [
          {
            "node": "Enhanced Conversation History Builder",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Post-Send Reset Handler": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Airtable Manager - Create",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Airtable Manager - Upsert",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Enhanced Conversation History Builder": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "086ebe97-cc25-4816-a5b0-d45801dcb50d",
  "meta": {
    "instanceId": "47f608faffa114b0881e3b97ef4a360c9e2b44e8374ddea1f90513c5fb68463f"
  },
  "id": "ELqpufx15m1ozWTc",
  "tags": []
}
